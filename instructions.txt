Here’s a production-ready schema.prisma you can drop in. It matches the “ISO Readiness Studio” plan (orgs, teams/people, projects, 96 master controls, per-control answers with status/owner/notes, and a full audit log). I’ve added sensible indexes, unique constraints, and safe referential actions.

// ==========================
// schema.prisma
// ISO Readiness Studio (AliceSolutionsGroup)
// ==========================

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

///////////////////////
// ENUMS
///////////////////////

enum ControlStatus {
  READY
  PARTIAL
  MISSING
}

enum Domain {
  A5  // Organizational
  A6  // People
  A7  // Physical
  A8  // Technological
  A9
  A10
  A11
  A12
  A13
  A14
  A15
  A16
  A17
  A18
}

///////////////////////
// MODELS
///////////////////////

// Multi-tenant root
model Organization {
  id           String   @id @default(cuid())
  name         String
  slug         String   @unique
  requireCMMC  Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  users        UserOrganization[]
  teams        Team[]
  projects     Project[]
  activity     ActivityLog[]

  @@index([name])
}

// End-users (can belong to many orgs)
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())

  orgs      UserOrganization[]
  teams     TeamMember[]
  activity  ActivityLog[]
}

// Membership & RBAC per org
model UserOrganization {
  id             String   @id @default(cuid())
  userId         String
  organizationId String
  role           String   // "owner" | "admin" | "member"

  User          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  Organization  Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  createdAt     DateTime @default(now())

  @@unique([userId, organizationId])
  @@index([organizationId, role])
}

// Teams inside an org (e.g., SOC, IT Infra, HR)
model Team {
  id             String   @id @default(cuid())
  organizationId String
  name           String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  Organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  members        TeamMember[]

  @@unique([organizationId, name])
  @@index([organizationId])
}

// Team membership
model TeamMember {
  id      String @id @default(cuid())
  teamId  String
  userId  String

  Team    Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  User    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([teamId, userId])
  @@index([userId])
}

// Projects hold one “run” of the checklist (e.g., Plasan 2025)
model Project {
  id             String   @id @default(cuid())
  organizationId String
  name           String   // e.g., "Plasan ISO27001 Readiness 2025"
  mode           String   // "story" | "list"
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  Organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  answers        Answer[]
  activity       ActivityLog[]

  @@unique([organizationId, name])
  @@index([organizationId])
}

// Master library: the 96 controls (seed once)
// Example fields: domain=A5, section="5.1", title="Policies for information security"
model Control {
  id          String  @id @default(cuid())
  domain      Domain
  section     String  // "5.1"..."18.x" etc.
  title       String  // ISO 27002:2022 short name
  description String
  cmmcRef     String? // e.g., "3.12.1; 3.5.3" (NIST 800-171 mapping), optional

  // Reverse
  answers     Answer[]

  @@unique([domain, section])
  @@index([section])
  @@index([cmmcRef])
}

// One row per project × control (status, owner, notes, evidence URL)
model Answer {
  id           String        @id @default(cuid())
  projectId    String
  controlId    String
  status       ControlStatus @default(MISSING)

  // Owner can be a user OR a team (one of these set; both null = unassigned)
  ownerType    String?       // "user" | "team"
  ownerUserId  String?
  ownerTeamId  String?

  notes        String?       // free text
  evidenceUrl  String?       // URL only (no uploads)
  updatedBy    String?       // userId of last editor
  updatedAt    DateTime      @updatedAt
  createdAt    DateTime      @default(now())

  Project      Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  Control      Control @relation(fields: [controlId], references: [id], onDelete: Restrict)

  // Soft FKs for owners (not enforced to allow “external” placeholders if you wish)
  OwnerUser    User?   @relation("AnswerOwnerUser", fields: [ownerUserId], references: [id], onDelete: SetNull)
  OwnerTeam    Team?   @relation("AnswerOwnerTeam", fields: [ownerTeamId], references: [id], onDelete: SetNull)

  @@unique([projectId, controlId])
  @@index([projectId])
  @@index([controlId])
  @@index([status])
  @@index([ownerUserId])
  @@index([ownerTeamId])
}

// Full audit trail for compliance (who/when/what)
model ActivityLog {
  id             String   @id @default(cuid())
  organizationId String
  projectId      String
  userId         String?
  action         String   // e.g., "SET_STATUS", "ASSIGN_OWNER", "ADD_NOTE"
  meta           Json
  createdAt      DateTime @default(now())

  Organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  Project        Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  User           User?        @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([organizationId, createdAt])
  @@index([projectId, createdAt])
  @@index([userId, createdAt])
}

Notes & rationale (quick)
	•	Tenant safety: every Project, Team, ActivityLog ties back to Organization; queries should always scope by organizationId.
	•	Answers ownership: kept flexible via ownerType + ownerUserId/ownerTeamId; both nullable so you can leave unassigned during onboarding.
	•	Referential actions:
	•	Deleting an Organization cascades to members, teams, projects, answers, and activity (clean teardown).
	•	Deleting a Control is restricted (you shouldn’t delete 96 masters in prod); update instead.
	•	Indexes: tuned for common filters—by org, project, status, owner, and time (activity).

⸻

If you want, I can also paste a seed-controls.ts with all 96 Annex A controls (including suggested CMMC refs) so you can pnpm prisma db seed and be live instantly.
Love it. Let’s build this as a beautiful, interactive ISO 27001:2022 (+ CMMC) readiness page that lives under AliceSolutionsGroup and lets companies play their way through compliance—no uploads, just guided answers, status picks, owners, and team-building.

Below is a complete, ship-ready plan: architecture, data model, security, UX flows, scoring, and concrete code scaffolding (Next.js 15 + Prisma). You can hand this to a dev (or drop into Cursor) and start.

⸻

Product spec — “ISO Readiness Studio” (web)

1) Core experience (what users can do)
	•	Two modes
	•	Story Mode: a narrative, “half-game” flow (“You’re setting up your SOC… who owns logging? pick a role; choose your baseline; answer quick prompts”).
	•	List Mode: the classic 96-control table with filters, bulk status updates, owners, links/notes.
	•	Interactive checklist (no uploads)
	•	Per control: Status (✅ Ready / ⚠️ Partial / ❌ Missing), Owner (person/team), Notes, Evidence link (URL only).
	•	Add Teams & People on the fly; assign as owners.
	•	Live progress meters per domain (A.5–A.18) and overall readiness score.
	•	Delta timeline: auto-save and show history of changes (who changed what).
	•	Outcome views
	•	Audit View (read-only, sorted by gaps).
	•	Roadmap View (auto-generated “to-do” grouped by owner + priority).
	•	Exports: read-only public share link, and download JSON/CSV (no files uploaded to us).
	•	CMMC add-on toggle
	•	Show NIST 800-171 mappings per control; add CUI prompts only if toggled on.

⸻

2) Tech stack + hosting
	•	Frontend: Next.js 15 (App Router, RSC), TypeScript, Shadcn UI (Radix), Tailwind, Framer Motion (light).
	•	State: React Query (TanStack) for client caching; server actions for mutations.
	•	Backend: Next.js API routes / server actions + Prisma ORM.
	•	DB: Postgres (Render.com, since your infra already uses it).
	•	Auth: NextAuth (email magic link + optional SSO later).
	•	Deploy: Render Web Service (website) + Render Postgres.
	•	Analytics/audit: basic server logs + Prisma activity log table (see below).

No file storage required.

⸻

3) Data model (Prisma) — production-ready

// schema.prisma
datasource db { provider = "postgresql"; url = env("DATABASE_URL") }
generator client { provider = "prisma-client-js" }

enum ControlStatus { READY PARTIAL MISSING }
enum Domain { A5 A6 A7 A8 A9 A10 A11 A12 A13 A14 A15 A16 A17 A18 } // Annex A.5–A.18

model Organization {
  id            String    @id @default(cuid())
  name          String
  slug          String    @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  // settings
  requireCMMC   Boolean   @default(false)
  // relationships
  users         UserOrganization[]
  teams         Team[]
  projects      Project[] // optional: multiple checklists
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  createdAt     DateTime  @default(now())
  orgs          UserOrganization[]
}

model UserOrganization {
  id            String   @id @default(cuid())
  userId        String
  organizationId String
  role          String   // "owner" | "admin" | "member"
  User          User     @relation(fields: [userId], references: [id])
  Organization  Organization @relation(fields: [organizationId], references: [id])
  @@unique([userId, organizationId])
}

model Team {
  id             String   @id @default(cuid())
  organizationId String
  name           String
  Organization   Organization @relation(fields: [organizationId], references: [id])
  members        TeamMember[]
}

model TeamMember {
  id      String @id @default(cuid())
  teamId  String
  userId  String
  Team    Team   @relation(fields: [teamId], references: [id])
  User    User   @relation(fields: [userId], references: [id])
  @@unique([teamId, userId])
}

model Project {
  id             String   @id @default(cuid())
  organizationId String
  name           String   // e.g., "Plasan ISO27001 Readiness 2025"
  mode           String   // "story" | "list"
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  Organization   Organization @relation(fields: [organizationId], references: [id])
  answers        Answer[]
}

model Control { // Master library (96 rows seeded once)
  id           String   @id @default(cuid())
  domain       Domain
  section      String   // e.g., "5.1"
  title        String   // ISO 27002 name
  description  String
  cmmcRef      String?  // e.g., "3.5.3; 3.3.5"
}

model Answer { // Per project per control
  id          String       @id @default(cuid())
  projectId   String
  controlId   String
  status      ControlStatus @default(MISSING)
  ownerType   String?      // "user" | "team"
  ownerUserId String?
  ownerTeamId String?
  notes       String?      // no file uploads; free text + URLs
  evidenceUrl String?      // optional URL (no upload)
  updatedBy   String?      // user id
  updatedAt   DateTime     @default(now())

  Project Project @relation(fields: [projectId], references: [id])
  Control Control @relation(fields: [controlId], references: [id])
  @@unique([projectId, controlId])
}

model ActivityLog {
  id          String   @id @default(cuid())
  organizationId String
  projectId   String
  userId      String?
  action      String   // e.g., "SET_STATUS", "ASSIGN_OWNER", "ADD_NOTE"
  meta        Json
  createdAt   DateTime @default(now())
}

Seeds: pre-load the 96 Annex A controls with domain, section, title, cmmcRef.

⸻

4) Security & compliance by design
	•	No customer documents stored; only text + URLs.
	•	RBAC: org owner/admin/member via UserOrganization.role.
	•	Row-level isolation: every query scoped by organizationId.
	•	Audit trail: ActivityLog for every change (who/when/what).
	•	PII minimum: name, email only.
	•	Backups: daily Postgres snapshots; monthly integrity check.
	•	Crypto: TLS everywhere; hashed session tokens; HSTS.
	•	Data residency: choose a Canadian region for DB if available.
	•	Legal: short T&C + AUP + Privacy Notice (no regulated data uploads).

⸻

5) Scoring & prioritization engine
	•	Per-domain score = (READY = 1, PARTIAL = 0.5, MISSING = 0) / count.
	•	Overall score = weighted average across A.5–A.18 (equal weights or ISO-biased if you prefer).
	•	Priority rules for roadmap:
	1.	Controls with CMMC references first (if CMMC enabled),
	2.	Then controls blocking many dependencies (e.g., policies 5.1, 5.15, 5.35),
	3.	Then by domain coverage (raise lowest domain to ≥ 0.7).

⸻

6) UX flows (precise)

A) Story Mode (gamified)
	1.	Welcome → choose ISO only or ISO + CMMC.
	2.	Build your org: add teams (“SOC”, “IT Infra”, “HR”), add people (name + email).
	3.	Narrative chapters (e.g., “Foundations”, “Access”, “Ops”, “Monitoring”, “Suppliers”, “Incidents”, “BCM”, “Compliance”) each bundles 8–12 controls into 3–5 scenario questions.
	4.	Micro-decisions map to controls: choosing “MFA enforced via IdP” sets 5.17 → READY (owner = SOC/IT).
	5.	Chapter summary shows gaps and quick-assign.
	6.	Completion view: badges per domain + shareable read-only link.

B) List Mode (power users & auditors)
	•	Sticky header filters: Domain, Status, Owner, CMMC ref present?
	•	Inline edit chips for Status; owner pill with person/team picker.
	•	Right drawer for Notes + Evidence URL and change history.
	•	Bulk-edit FAB: “Set 6 selected to PARTIAL, owner = SOC”.

⸻

7) API routes (Next.js) — examples

// /app/api/projects/[projectId]/answers/route.ts
import { auth } from "@/lib/auth"; import { db } from "@/lib/db";
export async function PATCH(req: Request, { params }: { params: { projectId: string }}) {
  const user = await auth.requireUser();
  const body = await req.json(); 
  // { controlId, status, ownerType?, ownerUserId?, ownerTeamId?, notes?, evidenceUrl? }
  // 1) authorize user in org for this project
  // 2) upsert Answer
  // 3) write ActivityLog
  // 4) return new aggregate scores
}

// /app/api/projects/[projectId]/score/route.ts
// returns per-domain & overall scores for dashboards

// /app/api/controls/route.ts
// read-only list of the 96 controls (+ cmmcRef)


⸻

8) Frontend components (clean cut)
	•	ChecklistTable.tsx – virtualized table with inline status & owner editors.
	•	StoryChapter.tsx – scenario cards → control mappings.
	•	OwnerPicker.tsx – unified picker (user/team) with quick-add.
	•	StatusChip.tsx – READY/PARTIAL/MISSING (keyboard shortcuts: 1/2/3).
	•	DomainProgress.tsx – ring charts per A.5–A.18.
	•	Roadmap.tsx – backlog grouped by owner + priority.
	•	ChangesDrawer.tsx – activity timeline for a control.

⸻

9) Seeding the 96 controls (snippet)

// scripts/seed-controls.ts
const controls = [
  { domain: "A5", section: "5.1", title: "Policies for information security", cmmcRef: "3.12.1" },
  { domain: "A5", section: "5.2", title: "Information security roles and responsibilities", cmmcRef: "3.12.2" },
  // ...populate all Annex A.5–A.18 (96 total) with mapped refs
];

(We already have your control list + CMMC mapping; you can paste that as the seed.)

⸻

10) Routing & embedding in AliceSolutionsGroup
	•	Public marketing page: /iso-readiness (explainer + demo).
	•	App entry: /app/readiness (login) → Organization selector → Project.
	•	Public share (read-only): /share/{token} for auditors or execs.

SSO later: link to Zoho/Google if you want single-click org onboarding.

⸻

11) Governance & legal (short)
	•	Terms: tool is guidance only; customer responsible for accuracy.
	•	Privacy: no document uploads, only text/URLs; data deletion upon request.
	•	Data retention: 24 months by default; configurable per org.

⸻

12) MVP scope (2–3 sprints)
	1.	Sprint 1
	•	Auth, org/project creation, seed 96 controls, List Mode CRUD, scoring.
	2.	Sprint 2
	•	Story Mode Chapters 1–3 (Foundations/Access/Ops), Teams & People, ActivityLog.
	3.	Sprint 3
	•	Roadmap view, share links, CSV/JSON export, domain dashboards, CMMC toggle.

⸻

13) What I’ll deliver next (if you want me to proceed now)
	•	Prisma schema file (complete) + seed script with all 96 controls + mappings.
	•	Next.js pages/components skeleton with working List Mode, scoring, and ActivityLog.
	•	UI tokens (shadcn) for status chips, domain colors, and motion presets.
	•	Copy for Story Mode (first 3 chapters, each 4–5 scenario cards).

⸻

If you’re good with this blueprint, I’ll start by pasting the seed library of all 96 controls with their CMMC refs and the exact Prisma schema + initial API routes in-chat so you can drop into your repo. Would you like me to generate the seed file + minimal working Next.js pages right now?