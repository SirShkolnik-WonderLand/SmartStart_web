generator client {
  provider = "prisma-client-js"
}

/// @seed="tsx prisma/seed.ts"

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String?  @unique
  password  String?
  name      String?
  firstName String?
  lastName  String?
  role      String?  @default("TEAM_MEMBER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // privacy
  profile ProfilePrivacy?

  // tenancy (for future SaaS)
  tenantId String? @default("default")

  // gamification
  level      UserLevel  @default(OWLET)
  xp         Int        @default(0)
  reputation Int        @default(0)
  status     UserStatus @default(ACTIVE)
  lastActive DateTime   @default(now())

  // Smart computed fields for portfolio insights
  totalPortfolioValue Float @default(0) // Computed from all projects
  activeProjectsCount Int   @default(0) // Computed from active memberships
  totalContributions  Int   @default(0) // Computed from contributions

  // Enhanced portfolio metrics
  totalEquityOwned        Float     @default(0) // Total % ownership across all projects
  averageEquityPerProject Float     @default(0) // Average ownership per project
  portfolioDiversity      Int       @default(0) // Number of different project types
  lastEquityEarned        DateTime? // Last time equity was earned

  // subscription & billing
  subscriptions    Subscription[]
  invoices         Invoice[]
  payments         Payment[]

  // platform legal pack
  platformLegalPacks PlatformLegalPack[]
  platformNDAs       PlatformNDA[]
  eSignatureConsents ESignatureConsent[]

  // user journey
  journeyStates      UserJourneyState[]

  // KYC and MFA
  kycVerifications   KycVerification[]
  mfaSetup          MfaSetup?

  // relations
  projectsOwned    Project[]         @relation("ProjectOwner")
  contributions    Contribution[]
  messages         Message[]         @relation("UserMessages")
  messageReactions MessageReaction[] @relation("UserMessageReactions")
  kudos            Kudos[]           @relation("UserKudos")
  assignedTasks    Task[]            @relation("TaskAssignee")
  ideas            Idea[]            @relation("UserIdeas")
  pollVotes        PollVote[]        @relation("UserPollVotes")
  kudosGiven       Kudos[]           @relation("UserKudosGiven")
  meshItems        MeshItem[]        @relation("MeshItemAuthor")
  meshReactions    MeshReaction[]    @relation("UserMeshReactions")
  userBadges       UserBadge[]
  userSkills       UserSkill[]

  // Enhanced contract relations
  contractOffers     ContractOffer[]     @relation("ContractOfferRecipient")
  contractSignatures ContractSignature[] @relation("ContractSignatureSigner")
  equityVesting      EquityVesting[]     @relation("EquityVestingBeneficiary")

  // Legal entity and coop relations
  legalEntityMemberships  LegalEntityMember[]      @relation("LegalEntityMembership")
  coopMemberships         CoopMember[]             @relation("CoopMembership")
  legalDocumentSignatures LegalDocumentSignature[] @relation("LegalDocumentSigner")

  // auth & membership
  account            Account?
  projectMemberships ProjectMember[]
  notifications      Notification[]

  // Smart activity tracking
  activityLog UserActivity[]

  // New v1 relations
  userProfile               UserProfile?
  wallet                    Wallet?
  endorsementsGiven         Endorsement[]      @relation("Endorser")
  endorsementsReceived      Endorsement[]      @relation("Endorsed")
  portfolio                 PortfolioItem[]
  clients                   Client[]
  documents                 UserDocument[]
  docSharesFrom             DocShare[]         @relation("DocShareFrom")
  docSharesTo               DocShare[]         @relation("DocShareTo")
  signatureRequestsFrom     SignatureRequest[] @relation("SigReqBy")
  signatureRequestsAsSigner SignatureRequest[] @relation("SigReqSigner")
  legalHoldsCreated         LegalHold[]        @relation("LegalHoldCreator")
  legalHoldsTargeted        LegalHold[]        @relation("LegalHoldTarget")
  equityConversions         EquityConversion[]
  reviews                   Review[]

  // Venture ownership
  venturesOwned Venture[] @relation("VentureOwner")

  // User connections
  connectionRequests UserConnection[] @relation("ConnectionRequester")
  connectionTargets  UserConnection[] @relation("ConnectionTarget")

  // Team relationships
  teamsLed        Team[] @relation("TeamLead")
  teamMemberships TeamMember[]

  // Company relationships
  companiesOwned Company[] @relation("CompanyOwner")
  
  // Team channel relationships
  teamChannelMemberships TeamChannelMember[] @relation("TeamChannelMember")

  @@index([tenantId])
  @@index([status])
  @@index([level])
  @@index([totalPortfolioValue])
  @@index([activeProjectsCount])
  @@index([totalEquityOwned])
  @@index([lastEquityEarned])
}

model ProfilePrivacy {
  id                 String  @id @default(cuid())
  userId             String  @unique
  user               User    @relation(fields: [userId], references: [id])
  showExactPercToHub Boolean @default(false)
  showActivity       Boolean @default(true)
  showSkills         Boolean @default(true)
  showReputation     Boolean @default(true)
}

model Project {
  id        String    @id @default(cuid())
  name      String
  summary   String?
  ownerId   String
  owner     User      @relation("ProjectOwner", fields: [ownerId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // tenancy (for future SaaS)
  tenantId String? @default("default")

  // Smart project metrics
  totalValue     Float    @default(0) // Computed from cap table
  activeMembers  Int      @default(0) // Computed from active memberships
  completionRate Float    @default(0) // Computed from tasks
  lastActivity   DateTime @default(now()) // Computed from latest activity

  // Enhanced project contract settings
  contractVersion String          @default("v1.0") // Contract version for tracking changes
  equityModel     EquityModel     @default(DYNAMIC) // How equity is distributed
  vestingSchedule VestingSchedule @default(IMMEDIATE) // When equity vests

  // cap table entries
  capEntries CapTableEntry[]
  sprints    Sprint[]
  tasks      Task[]
  ideas      Idea[]
  polls      Poll[]
  messages   Message[]       @relation("ProjectMessages")
  meshItems  MeshItem[]      @relation("MeshItemProject")

  // Enhanced contract relations
  contractOffers     ContractOffer[]     @relation("ContractOfferProject")
  contractSignatures ContractSignature[] @relation("ContractSignatureProject")
  equityVesting      EquityVesting[]     @relation("EquityVestingProject")

  // Legal entity and coop relations
  legalEntityId  String?
  legalEntity    LegalEntity?    @relation("ProjectLegalEntity", fields: [legalEntityId], references: [id])
  coopId         String?
  coop           StartupCoop?    @relation("ProjectCoop", fields: [coopId], references: [id])
  legalDocuments LegalDocument[] @relation("ProjectLegalDocuments")

  // guardrails (enforced in service)
  ownerMinPct Float @default(35)
  aliceCapPct Float @default(25)
  reservePct  Float @default(40)

  // membership & visibility
  members    ProjectMember[]
  visibility ProjectVisibility?

  // Smart project insights
  insights ProjectInsight[]

  // Project submission relation
  submission ProjectSub?

  // New v1 relations
  equityConversions EquityConversion[]
  legalHolds        LegalHold[]

  @@index([tenantId])
  @@index([totalValue])
  @@index([completionRate])
  @@index([lastActivity])
  @@index([equityModel])
  @@index([vestingSchedule])
}

// New model for smart project insights
model ProjectInsight {
  id          String             @id @default(cuid())
  projectId   String
  project     Project            @relation(fields: [projectId], references: [id])
  type        ProjectInsightType
  title       String
  description String
  priority    Int
  confidence  Float
  data        Json // Flexible data storage
  createdAt   DateTime           @default(now())
  expiresAt   DateTime?

  @@index([projectId])
  @@index([type])
  @@index([priority])
}

// Project Submission Model for 30-day Launch Pipeline
model ProjectSub {
  id        String  @id @default(cuid())
  projectId String  @unique // One-to-one with Project
  project   Project @relation(fields: [projectId], references: [id])

  // Basic project information
  title                String
  description          String
  category             ProjectCategory
  marketSize           String?
  targetAudience       String?
  competitiveAdvantage String?
  revenueModel         String?
  estimatedFunding     Float?
  timeline             String?

  // Equity proposal (validated against business rules)
  ownerEquityProposal   Float // Must be >= 35%
  aliceEquityProposal   Float // Must be <= 25%
  contributorEquityPool Float
  reserveEquity         Float

  // Business validation
  marketValidation     String?
  technicalFeasibility String?
  financialProjections String?

  // 30-day sprint planning
  sprintGoals    String[] // Array of sprint objectives
  keyMilestones  String[] // Key milestones for each sprint
  successMetrics String[] // Success criteria
  requiredSkills String[] // Skills needed for the project

  // Team and commitment
  teamSize       Int    @default(3)
  timeCommitment String @default("10-15 hours/week")

  // Marketing and launch strategy
  marketingStrategy String?
  launchChannels    String[] // Array of launch channels
  pricingStrategy   String?

  // Submission workflow
  status      ProjectSubmissionStatus @default(SUBMITTED)
  submittedAt DateTime                @default(now())
  reviewedAt  DateTime?
  reviewedBy  String? // User ID of reviewer
  reviewNotes String?

  // Legal and compliance
  termsAccepted   Boolean @default(false)
  privacyAccepted Boolean @default(false)
  contractVersion String  @default("v1.0")

  @@index([projectId])
  @@index([status])
  @@index([submittedAt])
  @@index([category])
}

// Project Submission Status Enum
enum ProjectSubmissionStatus {
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
  REVISION_REQUESTED
}

// Project Category Enum
enum ProjectCategory {
  SAAS
  MOBILE_APP
  WEB_APP
  ECOMMERCE
  MARKETPLACE
  FINANCIAL_TECH
  HEALTH_TECH
  ED_TECH
  AI_ML
  BLOCKCHAIN
  OTHER
}

enum ProjectInsightType {
  PERFORMANCE
  COLLABORATION
  RISK
  OPPORTUNITY
  MILESTONE
}

model CapTableEntry {
  id         String     @id @default(cuid())
  projectId  String
  project    Project    @relation(fields: [projectId], references: [id])
  holderType HolderType
  holderId   String?
  pct        Float
  source     String
  createdAt  DateTime   @default(now())

  // Enhanced cap table tracking
  value       Float     @default(0) // Computed value based on project total
  vestingDate DateTime? // When this equity vests
  isVested    Boolean   @default(false) // Whether equity has vested

  // Contract tracking
  contractId     String? // Reference to contract if applicable
  contributionId String? // Reference to contribution if applicable

  @@unique([projectId, holderType, holderId])
  @@index([projectId])
  @@index([holderType])
  @@index([holderId])
  @@index([vestingDate])
  @@index([isVested])
}

enum HolderType {
  OWNER
  ALICE
  USER
  RESERVE
}

model Sprint {
  id           String   @id @default(cuid())
  projectId    String
  project      Project  @relation(fields: [projectId], references: [id])
  start        DateTime
  end          DateTime
  goals        String
  exitCriteria String
  tasks        Task[]

  // Smart sprint metrics
  completionRate Float @default(0) // Computed from tasks
  velocity       Float @default(0) // Computed from completed tasks

  @@index([projectId])
  @@index([start])
  @@index([end])
}

enum TaskType {
  CODE
  DESIGN
  GROWTH
  OPS
}

enum TaskStatus {
  TODO
  DOING
  REVIEW
  DONE
}

model Task {
  id            String         @id @default(cuid())
  sprintId      String?
  sprint        Sprint?        @relation(fields: [sprintId], references: [id])
  projectId     String
  project       Project        @relation(fields: [projectId], references: [id])
  title         String
  type          TaskType
  status        TaskStatus     @default(TODO)
  assigneeId    String?
  assignee      User?          @relation("TaskAssignee", fields: [assigneeId], references: [id])
  contributions Contribution[]

  // Smart task metrics
  effort   Int       @default(0) // Estimated effort in hours
  impact   Int       @default(0) // Impact score 1-5
  priority Int       @default(3) // Priority 1-5
  dueDate  DateTime?

  // New v1 relations
  portfolioItems PortfolioItem[]
  walletLedgers  WalletLedger[]
  reviews        Review[]

  @@index([projectId])
  @@index([assigneeId])
  @@index([status])
  @@index([priority])
  @@index([dueDate])
}

// Review model for task quality assessment
model Review {
  id           String         @id @default(cuid())
  taskId       String
  task         Task           @relation(fields: [taskId], references: [id])
  reviewerId   String
  reviewer     User           @relation(fields: [reviewerId], references: [id])
  qualityScore Int            @default(3) // 1-5 quality rating
  comments     String?
  decision     ReviewDecision @default(PENDING)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  // Relations
  walletLedgers WalletLedger[]

  @@index([taskId])
  @@index([reviewerId])
  @@index([decision])
}

enum ReviewDecision {
  PENDING
  APPROVED
  REJECTED
  CHANGES_REQUESTED
}

model Contribution {
  id            String             @id @default(cuid())
  taskId        String
  task          Task               @relation(fields: [taskId], references: [id])
  contributorId String
  contributor   User               @relation(fields: [contributorId], references: [id])
  effort        Int
  impact        Int
  proposedPct   Float
  finalPct      Float?
  acceptedAt    DateTime?
  acceptedById  String?
  status        ContributionStatus @default(PENDING)

  // Enhanced contribution tracking
  quality       Int @default(3) // Quality score 1-5
  collaboration Int @default(3) // Collaboration score 1-5

  // Contract integration
  contractOfferId String? // Link to contract offer
  equityGranted   Float? // Final equity granted
  vestingSchedule VestingSchedule @default(IMMEDIATE)

  // Performance metrics
  completionTime          Int? // Time to complete in hours
  stakeholderSatisfaction Int? // Satisfaction score 1-5

  @@index([taskId])
  @@index([contributorId])
  @@index([status])
  @@index([contractOfferId])
  @@index([equityGranted])
}

enum ContributionStatus {
  PENDING
  APPROVED
  REJECTED
}

model Idea {
  id         String    @id @default(cuid())
  projectId  String?
  project    Project?  @relation(fields: [projectId], references: [id])
  proposerId String
  proposer   User      @relation("UserIdeas", fields: [proposerId], references: [id])
  title      String
  body       String
  status     String
  votes      Int       @default(0)
  createdAt  DateTime  @default(now())
  deletedAt  DateTime?

  // Smart idea metrics
  priority Int      @default(3) // Priority 1-5
  impact   Int      @default(3) // Impact score 1-5
  effort   String? // Estimated effort
  category String? // Idea category
  tags     String[] // Flexible tags

  // Smart idea insights
  insights IdeaInsight[]

  @@index([projectId])
  @@index([status])
  @@index([priority])
  @@index([votes])
}

// New model for smart idea insights
model IdeaInsight {
  id        String   @id @default(cuid())
  ideaId    String
  idea      Idea     @relation(fields: [ideaId], references: [id])
  type      String // e.g., "trending", "collaboration", "opportunity"
  score     Float // Insight score
  data      Json // Flexible data storage
  createdAt DateTime @default(now())

  @@index([ideaId])
  @@index([type])
}

model Poll {
  id        String     @id @default(cuid())
  projectId String?
  project   Project?   @relation(fields: [projectId], references: [id])
  question  String
  type      String
  closesAt  DateTime
  votes     PollVote[]

  // Smart poll metrics
  totalVotes Int     @default(0) // Computed from votes
  isActive   Boolean @default(true) // Computed from closesAt

  @@index([projectId])
  @@index([closesAt])
  @@index([isActive])
}

model PollVote {
  id        String   @id @default(cuid())
  pollId    String
  poll      Poll     @relation(fields: [pollId], references: [id])
  voterId   String
  voter     User     @relation("UserPollVotes", fields: [voterId], references: [id])
  value     String
  createdAt DateTime @default(now())

  @@unique([pollId, voterId])
  @@index([pollId])
  @@index([voterId])
}

model Message {
  id        String    @id @default(cuid())
  projectId String?
  project   Project?  @relation("ProjectMessages", fields: [projectId], references: [id])
  authorId  String
  author    User      @relation("UserMessages", fields: [authorId], references: [id])
  body      String
  createdAt DateTime  @default(now())
  deletedAt DateTime?

  // Smart message features
  type      MessageType       @default(GENERAL)
  priority  Int               @default(3) // Priority 1-5
  reactions MessageReaction[]

  @@index([projectId])
  @@index([authorId])
  @@index([type])
  @@index([createdAt])
}

enum MessageType {
  GENERAL
  ANNOUNCEMENT
  QUESTION
  UPDATE
  CELEBRATION
}

// New model for message reactions
model MessageReaction {
  id        String   @id @default(cuid())
  messageId String
  message   Message  @relation(fields: [messageId], references: [id])
  userId    String
  user      User     @relation("UserMessageReactions", fields: [userId], references: [id])
  emoji     String
  createdAt DateTime @default(now())

  @@unique([messageId, userId, emoji])
  @@index([messageId])
  @@index([userId])
}

model Kudos {
  id         String   @id @default(cuid())
  toUserId   String
  toUser     User     @relation("UserKudos", fields: [toUserId], references: [id])
  fromUserId String
  fromUser   User     @relation("UserKudosGiven", fields: [fromUserId], references: [id])
  message    String
  createdAt  DateTime @default(now())

  // Smart kudos tracking
  category String? // Kudos category
  impact   Int     @default(3) // Impact score 1-5

  @@index([toUserId])
  @@index([fromUserId])
  @@index([category])
}

model AuditEvent {
  id        String   @id @default(cuid())
  actorId   String?
  entity    String
  action    String
  payload   Json
  createdAt DateTime @default(now())

  @@index([actorId])
  @@index([entity])
  @@index([createdAt])
}

model Account {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String?
  roleId    String
  role      Role     @relation(fields: [roleId], references: [id])
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  // Enhanced authentication
  isActive      Boolean   @default(true)
  lastLogin     DateTime?
  loginAttempts Int       @default(0)
  lockedUntil   DateTime?
  mfaEnabled    Boolean   @default(false)
  mfaSecret     String?

  // Session management
  sessions Session[]

  @@index([email])
  @@index([isActive])
  @@index([lastLogin])
  @@index([roleId])
}

// New Session model for secure authentication
model Session {
  id        String   @id @default(cuid())
  accountId String
  account   Account  @relation(fields: [accountId], references: [id])
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  lastUsed  DateTime @default(now())

  @@index([accountId])
  @@index([token])
  @@index([expiresAt])
}

// Enhanced Permission system
model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  resource    String // e.g., "project", "user", "equity"
  action      String // e.g., "read", "write", "delete", "admin"
  createdAt   DateTime @default(now())

  // RBAC relations
  rolePermissions RolePermission[]

  @@index([resource])
  @@index([action])
}

// Role-Permission mapping
model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  role         Role       @relation(fields: [roleId], references: [id])
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id])
  grantedAt    DateTime   @default(now())
  grantedBy    String?

  @@unique([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
}

// Enhanced Role model with hierarchy
model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  level       Int // Hierarchy level (higher = more permissions)
  isSystem    Boolean  @default(false) // System roles cannot be deleted
  createdAt   DateTime @default(now())

  // Relations
  accounts        Account[]
  rolePermissions RolePermission[]

  @@index([level])
  @@index([isSystem])
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  OWNER
  CONTRIBUTOR
  MEMBER
  VIEWER
  GUEST
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
}

enum UserLevel {
  OWLET
  NIGHT_WATCHER
  WISE_OWL
  SKY_MASTER
}

model ProjectMember {
  id        String      @id @default(cuid())
  projectId String
  userId    String
  role      ProjectRole @default(MEMBER)
  createdAt DateTime    @default(now())

  // Smart membership tracking
  isActive           Boolean   @default(true)
  lastContribution   DateTime?
  totalContributions Int       @default(0)

  project Project @relation(fields: [projectId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@unique([projectId, userId])
  @@index([projectId])
  @@index([userId])
  @@index([isActive])
}

enum ProjectRole {
  OWNER
  MEMBER
  VIEWER
}

model ProjectVisibility {
  id                String  @id @default(cuid())
  projectId         String  @unique
  capTableHubMasked Boolean @default(true)
  tasksHubVisible   Boolean @default(false)
  ideasHubVisible   Boolean @default(true)
  pollsHubVisible   Boolean @default(true)

  project Project @relation(fields: [projectId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  kind      String
  payload   Json
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  // Smart notification features
  priority  Int       @default(3) // Priority 1-5
  expiresAt DateTime?
  actionUrl String? // URL to take action

  user User @relation(fields: [userId], references: [id])

  @@index([userId, read])
  @@index([createdAt])
  @@index([priority])
}

// New model for smart user activity tracking
model UserActivity {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  type       String // e.g., "login", "contribution", "idea", "poll"
  entity     String? // Related entity ID
  entityType String? // Type of entity
  data       Json // Flexible data storage
  createdAt  DateTime @default(now())

  @@index([userId])
  @@index([type])
  @@index([createdAt])
}

// Enhanced Mesh and Community features

model MeshItem {
  id          String       @id @default(cuid())
  type        MeshItemType
  title       String
  description String
  authorId    String
  author      User         @relation("MeshItemAuthor", fields: [authorId], references: [id])
  projectId   String?
  project     Project?     @relation("MeshItemProject", fields: [projectId], references: [id])
  priority    MeshPriority @default(MEDIUM)
  metadata    Json?
  createdAt   DateTime     @default(now())

  // Smart mesh features
  impact  Int      @default(3) // Impact score 1-5
  urgency Int      @default(3) // Urgency score 1-5
  tags    String[] // Flexible tags

  reactions MeshReaction[]

  @@index([authorId])
  @@index([projectId])
  @@index([type])
  @@index([createdAt])
  @@index([priority])
  @@index([impact])
}

enum MeshItemType {
  WIN
  MILESTONE
  NEED_HELP
  KUDOS
  IDEA_SPARK
  POLL_ACTIVE
  SPRINT_UPDATE
}

enum MeshPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model MeshReaction {
  id         String   @id @default(cuid())
  meshItemId String
  meshItem   MeshItem @relation(fields: [meshItemId], references: [id])
  userId     String
  user       User     @relation("UserMeshReactions", fields: [userId], references: [id])
  emoji      String
  createdAt  DateTime @default(now())

  @@unique([meshItemId, userId, emoji])
  @@index([meshItemId])
  @@index([userId])
}

model Badge {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  icon        String
  condition   String // JSON string describing how to earn
  createdAt   DateTime @default(now())

  // Smart badge features
  category String? // Badge category
  rarity   BadgeRarity @default(COMMON) // Badge rarity

  userBadges UserBadge[]
}

enum BadgeRarity {
  COMMON
  UNCOMMON
  RARE
  EPIC
  LEGENDARY
}

model UserBadge {
  id       String   @id @default(cuid())
  userId   String
  badgeId  String
  earnedAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id])
  badge Badge @relation(fields: [badgeId], references: [id])

  @@unique([userId, badgeId])
  @@index([userId])
  @@index([badgeId])
}

model Skill {
  id          String   @id @default(cuid())
  name        String   @unique
  category    String
  description String?
  createdAt   DateTime @default(now())

  // Smart skill features
  demand     Int @default(3) // Market demand 1-5
  complexity Int @default(3) // Skill complexity 1-5

  userSkills  UserSkill[]
  Endorsement Endorsement[]
}

model UserSkill {
  id        String   @id @default(cuid())
  userId    String
  skillId   String
  level     Int      @default(1) // 1-5 scale
  createdAt DateTime @default(now())

  // Smart skill tracking
  verified     Boolean @default(false) // Skill verification
  endorsements Int     @default(0) // Number of endorsements

  user  User  @relation(fields: [userId], references: [id])
  skill Skill @relation(fields: [skillId], references: [id])

  @@unique([userId, skillId])
  @@index([userId])
  @@index([skillId])
  @@index([level])
}

model SystemSetting {
  id          String   @id @default(cuid())
  category    String
  key         String
  value       String
  description String?
  updatedAt   DateTime @updatedAt

  @@unique([category, key])
  @@index([category])
}

// ---------- GAMIFICATION & COMMUNITY ----------
model Endorsement {
  id         String   @id @default(cuid())
  endorserId String
  endorser   User     @relation("Endorser", fields: [endorserId], references: [id], onDelete: Cascade)
  endorsedId String
  endorsed   User     @relation("Endorsed", fields: [endorsedId], references: [id], onDelete: Cascade)
  skillId    String?
  skill      Skill?   @relation(fields: [skillId], references: [id])
  weight     Int      @default(1) // 1..5 trust-weighted
  note       String?  @db.VarChar(200)
  createdAt  DateTime @default(now())

  @@index([endorsedId])
}

// Artifacts already exist (File). These connect files to portfolio.
model PortfolioItem {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  summary     String?  @db.VarChar(300)
  fileId      String? // optional linked artifact
  file        File?    @relation(fields: [fileId], references: [id])
  externalUrl String?  @db.VarChar(300)
  taskId      String? // provenance to Task
  // BUZ/quality overlays for visuals
  buzEarned   Int      @default(0)
  impactScore Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isPublic    Boolean  @default(true)
  Task        Task?    @relation(fields: [taskId], references: [id])
}

model CommunityInsight {
  id            String      @id @default(cuid())
  type          InsightType
  title         String
  description   String
  priority      Int
  confidence    Float
  actionItems   Json
  relevantUsers Json
  createdAt     DateTime    @default(now())
  expiresAt     DateTime?

  // Smart insight features
  impact   Int     @default(3) // Impact score 1-5
  category String? // Insight category

  @@index([type])
  @@index([priority])
  @@index([createdAt])
  @@index([impact])
}

enum InsightType {
  TRENDING
  OPPORTUNITY
  COLLABORATION
  MILESTONE
}

// COMPREHENSIVE CONTRACT & STARTUP COOP MANAGEMENT SYSTEM

// Smart contract offers between users and projects
model ContractOffer {
  id          String  @id @default(cuid())
  projectId   String
  project     Project @relation("ContractOfferProject", fields: [projectId], references: [id])
  recipientId String
  recipient   User    @relation("ContractOfferRecipient", fields: [recipientId], references: [id])

  // Contract terms
  equityPercentage Float // Equity offered (0.5% - 5%)
  vestingSchedule  VestingSchedule  @default(IMMEDIATE)
  contributionType ContributionType
  effortRequired   Int // Hours required
  impactExpected   Int // Expected impact 1-5

  // Contract status
  status     ContractStatus @default(PENDING)
  expiresAt  DateTime // When offer expires
  acceptedAt DateTime?
  rejectedAt DateTime?

  // Contract details
  terms        String // Contract terms and conditions
  deliverables String[] // What needs to be delivered
  milestones   String[] // Key milestones

  // Legal compliance
  contractVersion   String @default("v1.0")
  jurisdiction      String @default("CA") // Legal jurisdiction
  governingLaw      String @default("Ontario, Canada")
  disputeResolution String @default("Arbitration")

  // Metadata
  createdBy String // Who created the offer
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  signatures    ContractSignature[]
  equityVesting EquityVesting[]

  @@index([projectId])
  @@index([recipientId])
  @@index([status])
  @@index([expiresAt])
  @@index([contributionType])
  @@index([jurisdiction])
}

// Contract signatures for legal compliance
model ContractSignature {
  id         String        @id @default(cuid())
  contractId String
  contract   ContractOffer @relation(fields: [contractId], references: [id])
  signerId   String
  signer     User          @relation("ContractSignatureSigner", fields: [signerId], references: [id])
  projectId  String
  project    Project       @relation("ContractSignatureProject", fields: [projectId], references: [id])

  // Signature details
  signatureHash String // Hash of signed content
  signedAt      DateTime @default(now())
  ipAddress     String? // IP address of signer
  userAgent     String? // Browser/device info

  // Legal compliance
  termsAccepted   Boolean @default(false)
  privacyAccepted Boolean @default(false)

  @@index([contractId])
  @@index([signerId])
  @@index([projectId])
  @@index([signedAt])
}

// Equity vesting schedules
model EquityVesting {
  id            String        @id @default(cuid())
  contractId    String
  contract      ContractOffer @relation(fields: [contractId], references: [id])
  beneficiaryId String
  beneficiary   User          @relation("EquityVestingBeneficiary", fields: [beneficiaryId], references: [id])
  projectId     String
  project       Project       @relation("EquityVestingProject", fields: [projectId], references: [id])

  // Vesting details
  totalEquity     Float // Total equity to be vested
  vestedEquity    Float           @default(0) // Currently vested equity
  vestingSchedule VestingSchedule
  vestingStart    DateTime // When vesting begins
  vestingEnd      DateTime // When vesting completes

  // Vesting milestones
  cliffDate     DateTime? // Cliff date if applicable
  vestingEvents VestingEvent[]

  @@index([contractId])
  @@index([beneficiaryId])
  @@index([projectId])
  @@index([vestingStart])
  @@index([vestingEnd])
}

// Individual vesting events
model VestingEvent {
  id        String        @id @default(cuid())
  vestingId String
  vesting   EquityVesting @relation(fields: [vestingId], references: [id])

  // Event details
  equityAmount Float // Equity vested in this event
  vestingDate  DateTime // When this equity vested
  eventType    VestingEventType

  @@index([vestingId])
  @@index([vestingDate])
}

// STARTUP COOP & LEGAL ENTITY MANAGEMENT

// Legal entity registration and management
model LegalEntity {
  id           String          @id @default(cuid())
  name         String // Legal entity name
  type         LegalEntityType
  jurisdiction String // Country/state of incorporation

  // Registration details
  registrationNumber String? // Government registration number
  taxId              String? // Tax identification number
  incorporationDate  DateTime?

  // Legal structure
  legalForm          String // Corporation, LLC, Cooperative, etc.
  ownershipStructure String // How ownership is structured
  governanceModel    String // How decisions are made

  // Contact information
  registeredAddress String?
  mailingAddress    String?
  phone             String?
  email             String?

  // Compliance
  complianceStatus    ComplianceStatus @default(PENDING)
  lastComplianceCheck DateTime?
  complianceNotes     String?

  // Relations
  projects  Project[]           @relation("ProjectLegalEntity")
  members   LegalEntityMember[]
  documents LegalDocument[]
  coops     StartupCoop[]       @relation("CoopLegalEntity")
  ventureLegalEntities VentureLegalEntity[]

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([type])
  @@index([jurisdiction])
  @@index([complianceStatus])
}

// Legal entity membership
model LegalEntityMember {
  id       String      @id @default(cuid())
  entityId String
  entity   LegalEntity @relation(fields: [entityId], references: [id])
  userId   String
  user     User        @relation("LegalEntityMembership", fields: [userId], references: [id])

  // Role and rights
  role                LegalEntityRole
  votingRights        Boolean         @default(false)
  ownershipPercentage Float           @default(0)

  // Membership details
  joinedAt DateTime  @default(now())
  leftAt   DateTime?
  isActive Boolean   @default(true)

  // Legal compliance
  identityVerified Boolean @default(false)
  kycCompleted     Boolean @default(false)
  termsAccepted    Boolean @default(false)

  @@unique([entityId, userId])
  @@index([entityId])
  @@index([userId])
  @@index([role])
}

// Legal documents and contracts
model LegalDocument {
  id        String       @id @default(cuid())
  entityId  String?
  entity    LegalEntity? @relation(fields: [entityId], references: [id])
  projectId String?
  project   Project?     @relation("ProjectLegalDocuments", fields: [projectId], references: [id])

  // Document details
  title   String
  type    LegalDocumentType
  content String // Document content or file reference
  version String            @default("1.0")

  // Legal status
  status        LegalDocumentStatus @default(DRAFT)
  effectiveDate DateTime?
  expiryDate    DateTime?

  // Compliance
  requiresSignature  Boolean   @default(false)
  signatureDeadline  DateTime?
  complianceRequired Boolean   @default(false)

  // Metadata
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  signatures LegalDocumentSignature[]
  
  // Venture relationship for auto-issuance
  ventureId String?
  venture   Venture? @relation("VentureLegalDocuments", fields: [ventureId], references: [id])

  @@index([entityId])
  @@index([projectId])
  @@index([ventureId])
  @@index([type])
  @@index([status])
  @@index([effectiveDate])
}

// Legal document signatures
model LegalDocumentSignature {
  id         String        @id @default(cuid())
  documentId String
  document   LegalDocument @relation(fields: [documentId], references: [id])
  signerId   String
  signer     User          @relation("LegalDocumentSigner", fields: [signerId], references: [id])

  // Signature details
  signatureHash String // Hash of signed content
  signedAt      DateTime @default(now())
  ipAddress     String? // IP address of signer
  userAgent     String? // Browser/device info

  // Legal compliance
  termsAccepted    Boolean @default(false)
  privacyAccepted  Boolean @default(false)
  identityVerified Boolean @default(false)

  @@index([documentId])
  @@index([signerId])
  @@index([signedAt])
}

// Startup cooperative governance
model StartupCoop {
  id          String  @id @default(cuid())
  name        String // Cooperative name
  description String?

  // Cooperative structure
  type            CoopType
  governanceModel CoopGovernanceModel
  decisionMaking  CoopDecisionMaking

  // Membership
  minMembers     Int  @default(3)
  maxMembers     Int?
  currentMembers Int  @default(0)

  // Financial structure
  membershipFee Float   @default(0)
  monthlyDues   Float   @default(0)
  profitSharing Boolean @default(true)

  // Legal compliance
  legalEntityId    String?
  legalEntity      LegalEntity?     @relation("CoopLegalEntity", fields: [legalEntityId], references: [id])
  complianceStatus ComplianceStatus @default(PENDING)

  // Relations
  projects   Project[]        @relation("ProjectCoop")
  members    CoopMember[]
  governance CoopGovernance[]

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([type])
  @@index([governanceModel])
  @@index([complianceStatus])
}

// Cooperative membership
model CoopMember {
  id     String      @id @default(cuid())
  coopId String
  coop   StartupCoop @relation(fields: [coopId], references: [id])
  userId String
  user   User        @relation("CoopMembership", fields: [userId], references: [id])

  // Membership details
  role     CoopMemberRole
  joinedAt DateTime       @default(now())
  leftAt   DateTime?
  isActive Boolean        @default(true)

  // Voting and governance
  votingShares Int     @default(1)
  votingRights Boolean @default(true)

  // Financial
  membershipFee Float @default(0)
  monthlyDues   Float @default(0)
  profitShare   Float @default(0)

  // Relations
  governanceVotes CoopGovernanceVote[] @relation("GovernanceVote")

  @@unique([coopId, userId])
  @@index([coopId])
  @@index([userId])
  @@index([role])
}

// Cooperative governance decisions
model CoopGovernance {
  id     String      @id @default(cuid())
  coopId String
  coop   StartupCoop @relation(fields: [coopId], references: [id])

  // Decision details
  title       String
  description String
  type        GovernanceDecisionType
  status      GovernanceStatus       @default(PROPOSED)

  // Voting
  requiresVote   Boolean   @default(true)
  votingDeadline DateTime?
  quorumRequired Int       @default(51) // Percentage required

  // Results
  votesFor     Int @default(0)
  votesAgainst Int @default(0)
  votesAbstain Int @default(0)
  totalVotes   Int @default(0)

  // Implementation
  proposedBy    String
  approvedBy    String?
  approvedAt    DateTime?
  effectiveDate DateTime?

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  votes CoopGovernanceVote[]

  @@index([coopId])
  @@index([type])
  @@index([status])
  @@index([votingDeadline])
}

// Cooperative governance votes
model CoopGovernanceVote {
  id           String         @id @default(cuid())
  governanceId String
  governance   CoopGovernance @relation(fields: [governanceId], references: [id])
  memberId     String
  member       CoopMember     @relation("GovernanceVote", fields: [memberId], references: [id])

  // Vote details
  vote         VoteType
  votingShares Int      @default(1)
  votedAt      DateTime @default(now())

  // Optional
  comments String?

  @@unique([governanceId, memberId])
  @@index([governanceId])
  @@index([memberId])
  @@index([vote])
}

// Regulatory compliance tracking
model ComplianceRecord {
  id         String  @id @default(cuid())
  entityId   String? // Legal entity or project
  entityType String // "LEGAL_ENTITY", "PROJECT", "COOP"

  // Compliance details
  regulation  String // Regulation name/code
  requirement String // Specific requirement
  status      ComplianceStatus @default(PENDING)

  // Deadlines and tracking
  dueDate        DateTime?
  completedAt    DateTime?
  nextReviewDate DateTime?

  // Documentation
  evidence String? // Evidence of compliance
  notes    String?

  // Audit
  reviewedBy  String?
  reviewedAt  DateTime?
  reviewNotes String?

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([entityId])
  @@index([entityType])
  @@index([regulation])
  @@index([status])
  @@index([dueDate])
}

// Enhanced enums for new functionality
enum EquityModel {
  DYNAMIC // Equity based on contribution value
  FIXED // Fixed equity amounts
  HYBRID // Combination of fixed and dynamic
}

enum VestingSchedule {
  IMMEDIATE // Equity vests immediately
  MONTHLY // Monthly vesting over time
  QUARTERLY // Quarterly vesting
  ANNUAL // Annual vesting
  MILESTONE // Vesting based on milestones
  CLIFF // Cliff vesting with delay
}

enum ContributionType {
  CODE // Software development
  DESIGN // UI/UX design
  GROWTH // Marketing and growth
  OPS // Operations and management
  SALES // Sales and business development
  LEGAL // Legal and compliance
  FINANCE // Financial planning
  STRATEGY // Strategic planning
  RESEARCH // Research and development
  OTHER // Other contributions
}

enum ContractStatus {
  DRAFT // Contract is being drafted
  PENDING // Waiting for recipient response
  ACCEPTED // Contract accepted
  REJECTED // Contract rejected
  EXPIRED // Contract expired
  COMPLETED // Contract completed
  TERMINATED // Contract terminated
}

enum VestingEventType {
  INITIAL // Initial vesting
  MILESTONE // Milestone-based vesting
  TIME_BASED // Time-based vesting
  PERFORMANCE // Performance-based vesting
  ACCELERATION // Accelerated vesting
}

// STARTUP COOP & LEGAL ENTITY ENUMS

enum LegalEntityType {
  CORPORATION
  LLC
  COOPERATIVE
  PARTNERSHIP
  SOLE_PROPRIETORSHIP
  NON_PROFIT
  OTHER
}

enum LegalEntityRole {
  OWNER
  DIRECTOR
  OFFICER
  MEMBER
  PARTNER
  EMPLOYEE
  CONTRACTOR
}

enum LegalDocumentType {
  ARTICLES_OF_INCORPORATION
  BYLAWS
  OPERATING_AGREEMENT
  PARTNERSHIP_AGREEMENT
  EMPLOYMENT_CONTRACT
  EQUITY_AGREEMENT
  VESTING_SCHEDULE
  INTELLECTUAL_PROPERTY
  CONFIDENTIALITY_AGREEMENT
  TERMS_OF_SERVICE
  PRIVACY_POLICY
  OTHER
}

enum LegalDocumentStatus {
  DRAFT
  REVIEW
  APPROVED
  EFFECTIVE
  EXPIRED
  AMENDED
  TERMINATED
}

enum CoopType {
  WORKER_COOP
  CONSUMER_COOP
  PRODUCER_COOP
  MULTI_STAKEHOLDER_COOP
  HOUSING_COOP
  FINANCIAL_COOP
  OTHER
}

enum CoopGovernanceModel {
  DEMOCRATIC
  REPRESENTATIVE
  CONSENSUS
  HYBRID
  OTHER
}

enum CoopDecisionMaking {
  ONE_MEMBER_ONE_VOTE
  VOTING_SHARES
  CONSENSUS
  DELEGATED
  OTHER
}

enum CoopMemberRole {
  FOUNDING_MEMBER
  ACTIVE_MEMBER
  ASSOCIATE_MEMBER
  INVESTOR_MEMBER
  ADVISORY_MEMBER
}

enum GovernanceDecisionType {
  MEMBERSHIP
  FINANCIAL
  STRATEGIC
  OPERATIONAL
  LEGAL
  COMPLIANCE
  OTHER
}

enum GovernanceStatus {
  PROPOSED
  UNDER_REVIEW
  VOTING
  APPROVED
  REJECTED
  IMPLEMENTED
  CANCELLED
}

enum VoteType {
  FOR
  AGAINST
  ABSTAIN
  RECUSE
}

enum ComplianceStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  OVERDUE
  NON_COMPLIANT
  EXEMPT
}

// ---------- USER CONNECTIONS & NETWORKING ----------
model UserConnection {
  id             String   @id @default(cuid())
  requesterId    String
  requester      User     @relation("ConnectionRequester", fields: [requesterId], references: [id], onDelete: Cascade)
  targetId       String
  target         User     @relation("ConnectionTarget", fields: [targetId], references: [id], onDelete: Cascade)
  connectionType String   @default("CONNECTION") // CONNECTION, MENTOR, COLLABORATOR
  status         String   @default("PENDING") // PENDING, ACCEPTED, REJECTED, BLOCKED
  createdAt      DateTime @default(now())
  acceptedAt     DateTime?
  rejectedAt     DateTime?

  @@unique([requesterId, targetId])
  @@index([requesterId])
  @@index([targetId])
  @@index([status])
}

// ---------- GAMIFICATION & COMMUNITY ----------
model UserProfile {
  id           String   @id @default(cuid())
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  nickname     String   @db.VarChar(40)
  avatarFileId String? // -> File.id (S3/Render)
  avatarFile   File?    @relation(fields: [avatarFileId], references: [id])
  theme        String   @default("auto") // "auto" | "light" | "dark" | custom token set id
  bio          String?  @db.VarChar(280)
  location     String?  @db.VarChar(80)
  websiteUrl   String?  @db.VarChar(200)
  // Visual reputation surface
  level        Int      @default(1)
  xp           Int      @default(0) // bounded; rolls-up to level
  repScore     Int      @default(0) // long-term reputation (decays)
  // Portfolio publicness
  isPublic     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([repScore, level])
}

// ---------- WALLET & LEDGER (BUZ + Fiat accounting off-chain) ----------
model Wallet {
  id           String         @id @default(cuid())
  userId       String         @unique
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  buzBalance   Int            @default(0) // BUZ is integer (basis points)
  pendingLock  Int            @default(0) // locked for conversion windows/disputes
  // optional future blockchain hooks
  chainAddress String?        @unique
  chainType    String? // "evm", "sol", etc
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  WalletLedger WalletLedger[]
}

enum LedgerType {
  BUZ_EARN
  BUZ_BURN
  BUZ_LOCK
  BUZ_UNLOCK
  FIAT_CREDIT
  FIAT_DEBIT
  EQUITY_CONVERT
}

model WalletLedger {
  id          String     @id @default(cuid())
  walletId    String
  wallet      Wallet     @relation(fields: [walletId], references: [id], onDelete: Cascade)
  type        LedgerType
  amount      Int // BUZ in integer units; fiat minor units if used
  refTaskId   String?
  refReviewId String?
  refEquityId String?
  note        String?    @db.VarChar(200)
  createdAt   DateTime   @default(now())
  // WORM immutability via hash chain
  prevHash    String?    @db.VarChar(128)
  hash        String     @db.VarChar(128)
  Task        Task?      @relation(fields: [taskId], references: [id])
  taskId      String?
  Review      Review?    @relation(fields: [reviewId], references: [id])
  reviewId    String?

  @@index([walletId, createdAt])
}

model ConversionWindow {
  id               String             @id @default(cuid())
  opensAt          DateTime
  closesAt         DateTime
  equityRateBps    Int // e.g., BUZ→equity basis points (board-set)
  status           String             @default("SCHEDULED") // SCHEDULED|OPEN|CLOSED|FINALIZED
  notes            String?
  createdAt        DateTime           @default(now())
  EquityConversion EquityConversion[]

  @@index([opensAt, closesAt])
}

model EquityConversion {
  id              String           @id @default(cuid())
  userId          String
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  windowId        String
  window          ConversionWindow @relation(fields: [windowId], references: [id], onDelete: Cascade)
  buzUsed         Int
  equityGrantedBp Int // equity in basis points of venture or pool
  ventureId       String?
  venture         Project?         @relation(fields: [ventureId], references: [id])
  status          String           @default("PENDING") // PENDING|APPROVED|REJECTED|SETTLED
  decidedBy       String? // board approver (User.id)
  decidedAt       DateTime?
  createdAt       DateTime         @default(now())
}

// ---------- USER↔USER DOCUMENTS, CLIENTS, CONTRACTS, WORM ----------
model Client {
  id           String     @id @default(cuid())
  ownerUserId  String
  ownerUser    User       @relation(fields: [ownerUserId], references: [id], onDelete: Cascade)
  name         String
  email        String?    @db.VarChar(120)
  phone        String?    @db.VarChar(40)
  organization String?    @db.VarChar(120)
  tags         String[] // ["ISO27001","CISOaaS"]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  DocShare     DocShare[]

  @@index([ownerUserId])
}

model UserDocument {
  id               String             @id @default(cuid())
  ownerUserId      String
  ownerUser        User               @relation(fields: [ownerUserId], references: [id], onDelete: Cascade)
  title            String
  fileId           String
  file             File               @relation(fields: [fileId], references: [id], onDelete: Cascade)
  docType          String // "NDA","MSA","SOW","ISO-AUDIT","PORTFOLIO-PDF","INVOICE"
  checksumSha256   String             @db.VarChar(64) // WORM anchor
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  DocShare         DocShare[]
  SignatureRequest SignatureRequest[]
  LegalHold        LegalHold[]
}

model DocShare {
  id         String       @id @default(cuid())
  documentId String
  document   UserDocument @relation(fields: [documentId], references: [id], onDelete: Cascade)
  fromUserId String
  fromUser   User         @relation("DocShareFrom", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUserId   String?
  toUser     User?        @relation("DocShareTo", fields: [toUserId], references: [id])
  clientId   String?
  client     Client?      @relation(fields: [clientId], references: [id])
  canView    Boolean      @default(true)
  canComment Boolean      @default(false)
  canSign    Boolean      @default(false)
  expiresAt  DateTime?
  createdAt  DateTime     @default(now())

  @@index([toUserId, clientId])
}

model SignatureRequest {
  id            String       @id @default(cuid())
  documentId    String
  document      UserDocument @relation(fields: [documentId], references: [id], onDelete: Cascade)
  requestedById String
  requestedBy   User         @relation("SigReqBy", fields: [requestedById], references: [id], onDelete: Cascade)
  signerUserId  String?
  signerUser    User?        @relation("SigReqSigner", fields: [signerUserId], references: [id])
  signerEmail   String?      @db.VarChar(120) // external signer
  status        String       @default("PENDING") // PENDING|SIGNED|DECLINED|EXPIRED
  signedAt      DateTime?
  signatureHash String?      @db.VarChar(128) // detached ECDSA hash over checksumSha256
  createdAt     DateTime     @default(now())
  expiresAt     DateTime?
}

model LegalHold {
  id          String        @id @default(cuid())
  reason      String
  createdById String
  createdBy   User          @relation("LegalHoldCreator", fields: [createdById], references: [id])
  // targets
  documentId  String?
  document    UserDocument? @relation(fields: [documentId], references: [id])
  userId      String?
  user        User?         @relation("LegalHoldTarget", fields: [userId], references: [id])
  ventureId   String?
  venture     Project?      @relation(fields: [ventureId], references: [id])
  active      Boolean       @default(true)
  createdAt   DateTime      @default(now())
}

// File storage model for documents, avatars, and artifacts
model File {
  id             String   @id @default(cuid())
  filename       String
  originalName   String
  mimeType       String
  size           Int
  checksumSha256 String   @db.VarChar(64)
  storageUri     String // S3/Render storage path
  isPublic       Boolean  @default(false)
  uploadedBy     String // User.id
  uploadedAt     DateTime @default(now())

  // Relations
  userProfiles   UserProfile[]
  portfolioItems PortfolioItem[]
  userDocuments  UserDocument[]

  @@index([uploadedBy])
  @@index([checksumSha256])
}

// Append-only WORM audit entries for critical actions
model WormAudit {
  id        String   @id @default(cuid())
  scope     String // "WALLET","DOC","SIGNATURE","CONTRACT","LEDGER","EQUITY"
  refId     String // referenced entity id
  actorId   String? // User.id (system if null)
  action    String // "CREATE","UPDATE","AWARD_BADGE","ISSUE_BUZ","CONVERT_EQUITY","SIGN"
  details   Json
  prevHash  String?  @db.VarChar(128)
  hash      String   @db.VarChar(128)
  createdAt DateTime @default(now())

  @@index([scope, refId, createdAt])
}

// Venture Management System Models
model Venture {
  id        String   @id @default(cuid())
  name      String
  purpose   String
  region    String   @default("US")
  status    String   @default("DRAFT") // DRAFT, PENDING_CONTRACTS, ACTIVE, SUSPENDED, CLOSED
  ownerUserId String
  owner     User     @relation("VentureOwner", fields: [ownerUserId], references: [id])
  
  // Legal entity and equity framework
  ventureLegalEntityId String?
  ventureLegalEntity   VentureLegalEntity?
  equityFrameworkId    String?
  equityFramework      EquityFramework?
  
  // Venture profile and IT pack
  ventureProfile     VentureProfile?
  ventureITPack      VentureITPack?
  
  // Legal documents
  legalDocuments     LegalDocument[] @relation("VentureLegalDocuments")
  
  // Equity relations
  equityLedger       EquityLedger[] @relation("VentureEquityLedger")
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ownerUserId])
  @@index([status])
  @@index([region])
}

// Venture-specific legal entity (extends existing LegalEntity)
model VentureLegalEntity {
  id                String   @id @default(cuid())
  ventureId         String   @unique
  venture           Venture  @relation(fields: [ventureId], references: [id], onDelete: Cascade)
  legalEntityId     String
  legalEntity       LegalEntity @relation(fields: [legalEntityId], references: [id])
  status            String   @default("PENDING") // PENDING, ACTIVE, SUSPENDED
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
}

model EquityFramework {
  id            String   @id @default(cuid())
  ventureId     String   @unique
  venture       Venture  @relation(fields: [ventureId], references: [id], onDelete: Cascade)
  ownerPercent  Int      @default(35) // Minimum owner equity
  alicePercent  Int      @default(20) // Maximum AliceSolutions equity
  cepPercent    Int      @default(45) // Contributor Equity Pool
  vestingPolicy String   @default("4-year vest, 1-year cliff")
  status        String   @default("ACTIVE")
  
  // Equity ledger entries
  equityLedger  EquityLedger[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EquityLedger {
  id              String   @id @default(cuid())
  ventureId       String
  venture         Venture  @relation("VentureEquityLedger", fields: [ventureId], references: [id], onDelete: Cascade)
  equityFrameworkId String?
  equityFramework   EquityFramework? @relation(fields: [equityFrameworkId], references: [id])
  holderType      String   // USER, ALICE, CONTRIBUTOR
  holderId        String?  // User.id for USER type, null for ALICE
  percent         Float    // Ownership percentage
  vestingPolicyId String?
  vestingPolicy   VestingPolicy? @relation(fields: [vestingPolicyId], references: [id])
  effectiveFrom   DateTime @default(now())
  effectiveTo     DateTime? // null means currently effective
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ventureId])
  @@index([equityFrameworkId])
  @@index([holderType, holderId])
  @@index([effectiveFrom, effectiveTo])
}

model VestingPolicy {
  id             String   @id @default(cuid())
  name           String
  cliffMonths    Int      @default(12)
  durationMonths Int      @default(48)
  frequency      String   @default("MONTHLY") // MONTHLY, QUARTERLY, ANNUAL
  
  // Equity ledger entries using this policy
  equityLedger   EquityLedger[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VentureProfile {
  id          String   @id @default(cuid())
  ventureId   String   @unique
  venture     Venture  @relation(fields: [ventureId], references: [id], onDelete: Cascade)
  description String?
  industry    String   @default("Technology")
  stage       String   @default("STARTUP") // STARTUP, GROWTH, SCALE, EXIT
  fundingRound String  @default("PRE_SEED") // PRE_SEED, SEED, SERIES_A, etc.
  teamSize    Int      @default(1)
  website     String?
  socialMedia Json?    // LinkedIn, Twitter, etc.
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([industry])
  @@index([stage])
  @@index([fundingRound])
}

model VentureITPack {
  id               String   @id @default(cuid())
  ventureId        String   @unique
  venture          Venture  @relation(fields: [ventureId], references: [id], onDelete: Cascade)
  m365TenantId     String?
  emailAddress     String?
  githubOrg        String?
  renderServiceId  String?
  backupPolicyId   String?
  status           String   @default("PROVISIONING") // PROVISIONING, ACTIVE, FAILED
  provisionedAt    DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
}

// Company Management System
model Company {
  id          String   @id @default(cuid())
  name        String
  description String?
  
  // Company classification
  industry    String
  size        CompanySize @default(SMALL)
  stage       FundingStage @default(PRE_SEED)
  status      CompanyStatus @default(ACTIVE)
  visibility  CompanyVisibility @default(PUBLIC)
  
  // Company details
  foundedDate DateTime?
  website     String?
  location    String?
  logoUrl     String?
  
  // Company relationships
  ownerId     String
  owner       User     @relation("CompanyOwner", fields: [ownerId], references: [id])
  parentCompanyId String?
  parentCompany Company? @relation("CompanyParent", fields: [parentCompanyId], references: [id])
  subsidiaries Company[] @relation("CompanyParent")
  
  // Company structure
  teams       Team[]
  
  // Company data
  tags        CompanyTag[]
  hierarchy   CompanyHierarchy[]
  hierarchyChildren CompanyHierarchy[] @relation("CompanyHierarchyChildren")
  hierarchyParent CompanyHierarchy[] @relation("CompanyHierarchyParent")
  metrics     CompanyMetric[]
  documents   CompanyDocument[]
  
  // Company settings
  settings    Json?    // Flexible company configuration
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([ownerId])
  @@index([industry])
  @@index([size])
  @@index([stage])
  @@index([status])
  @@index([visibility])
  @@index([parentCompanyId])
}

// Company Classification & Tagging
model CompanyTag {
  id          String   @id @default(cuid())
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id])
  
  // Tag details
  name        String
  category    TagCategory @default(INDUSTRY)
  value       String?
  description String?
  
  // Tag metadata
  isPrimary   Boolean @default(false)
  confidence  Float   @default(1.0) // 0.0 to 1.0
  
  @@unique([companyId, name, category])
  @@index([companyId])
  @@index([category])
  @@index([name])
}

// Company Hierarchy Management
model CompanyHierarchy {
  id          String   @id @default(cuid())
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id])
  
  // Hierarchy details
  parentId    String?
  parent      Company? @relation("CompanyHierarchyParent", fields: [parentId], references: [id])
  children    Company[] @relation("CompanyHierarchyChildren")
  
  // Relationship details
  relationshipType String // "SUBSIDIARY", "BRANCH", "DIVISION", "JOINT_VENTURE"
  ownershipPercent Float? // Percentage ownership if applicable
  
  // Hierarchy metadata
  level       Int     @default(0) // 0 = root, 1 = first level, etc.
  path        String  // "/company1/company2/company3" for easy querying
  
  @@index([companyId])
  @@index([parentId])
  @@index([relationshipType])
  @@index([level])
  @@index([path])
}

// Company Performance Metrics
model CompanyMetric {
  id          String   @id @default(cuid())
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id])
  
  // Metric details
  name        String
  value       Float
  unit        String?
  metricType  String  // "FINANCIAL", "OPERATIONAL", "CUSTOMER", "EMPLOYEE"
  
  // Metric metadata
  description String?
  target      Float?
  threshold   Float?
  
  // Metric tracking
  period      String  // "DAILY", "WEEKLY", "MONTHLY", "QUARTERLY", "ANNUAL"
  effectiveDate DateTime
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([companyId])
  @@index([metricType])
  @@index([period])
  @@index([effectiveDate])
}

// Company Document Management
model CompanyDocument {
  id          String   @id @default(cuid())
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id])
  
  // Document details
  title       String
  description String?
  documentType String  // "CONTRACT", "POLICY", "REPORT", "CERTIFICATE", "OTHER"
  
  // Document metadata
  fileName    String
  fileSize    Int
  mimeType    String
  storageUri  String
  
  // Document status
  status      String @default("ACTIVE") // ACTIVE, ARCHIVED, DELETED
  isPublic    Boolean @default(false)
  
  // Document tracking
  uploadedBy  String
  uploadedAt  DateTime @default(now())
  lastAccessed DateTime?
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([companyId])
  @@index([documentType])
  @@index([status])
  @@index([uploadedBy])
}

// Team Management System
model Team {
  id          String   @id @default(cuid())
  name        String
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id])
  
  // Team structure
  parentTeamId String?
  parentTeam   Team?   @relation("TeamHierarchy", fields: [parentTeamId], references: [id])
  childTeams   Team[]  @relation("TeamHierarchy")
  
  // Team details
  purpose     String
  description String?
  size        Int
  leadId      String?
  lead        User?    @relation("TeamLead", fields: [leadId], references: [id])
  
  // Team status and visibility
  status      TeamStatus @default(ACTIVE)
  isPublic    Boolean  @default(true)
  
  // Team members
  members     TeamMember[]
  
  // Team performance
  goals       TeamGoal[]
  metrics     TeamMetric[]
  
  // Team communication
  channels    TeamChannel[]
  
  // Team settings
  settings    Json?    // Flexible team configuration
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([companyId])
  @@index([parentTeamId])
  @@index([status])
  @@index([isPublic])
}

// Team Member Management
model TeamMember {
  id        String   @id @default(cuid())
  teamId    String
  userId    String
  team      Team     @relation(fields: [teamId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  
  // Role and permissions
  role      TeamRole @default(MEMBER)
  permissions String[] // Array of TeamPermission values
  
  // Performance tracking
  isActive  Boolean  @default(true)
  joinedAt  DateTime @default(now())
  leftAt    DateTime?
  
  // Contribution metrics
  totalContributions Int @default(0)
  lastContribution  DateTime?
  
  // Member settings
  notificationsEnabled Boolean @default(true)
  autoAssignmentEnabled Boolean @default(true)
  
  @@unique([teamId, userId])
  @@index([teamId])
  @@index([userId])
  @@index([role])
  @@index([isActive])
}

// Team Goals & Objectives
model TeamGoal {
  id          String   @id @default(cuid())
  teamId      String
  team        Team     @relation(fields: [teamId], references: [id])
  
  // Goal details
  title       String
  description String?
  status      GoalStatus @default(DRAFT)
  priority    GoalPriority @default(MEDIUM)
  
  // Goal metrics
  targetValue Float?
  currentValue Float @default(0)
  unit        String?
  
  // Goal timeline
  startDate   DateTime?
  targetDate  DateTime?
  completedAt DateTime?
  
  // Goal tracking
  progress    Float @default(0) // 0-100 percentage
  milestones  TeamMilestone[]
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([teamId])
  @@index([status])
  @@index([priority])
  @@index([targetDate])
}

// Team Milestones
model TeamMilestone {
  id          String   @id @default(cuid())
  goalId      String
  goal        TeamGoal @relation(fields: [goalId], references: [id])
  
  // Milestone details
  title       String
  description String?
  targetDate  DateTime
  completedAt DateTime?
  
  // Milestone tracking
  isCompleted Boolean @default(false)
  order       Int     // Order in goal sequence
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([goalId])
  @@index([targetDate])
  @@index([isCompleted])
}

// Team Performance Metrics
model TeamMetric {
  id          String   @id @default(cuid())
  teamId      String
  team        Team     @relation(fields: [teamId], references: [id])
  
  // Metric details
  name        String
  value       Float
  unit        String?
  metricType  String  // "PERFORMANCE", "EFFICIENCY", "QUALITY", "ENGAGEMENT"
  
  // Metric metadata
  description String?
  target      Float?
  threshold   Float?
  
  // Metric tracking
  period      String  // "DAILY", "WEEKLY", "MONTHLY", "QUARTERLY"
  effectiveDate DateTime
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([teamId])
  @@index([metricType])
  @@index([period])
  @@index([effectiveDate])
}

// Team Communication & Collaboration
model TeamChannel {
  id          String   @id @default(cuid())
  teamId      String
  team        Team     @relation(fields: [teamId], references: [id])
  
  // Channel details
  name        String
  description String?
  channelType String  // "GENERAL", "ANNOUNCEMENTS", "PROJECTS", "WATERCOOLER"
  
  // Channel settings
  isPublic    Boolean @default(true)
  isArchived  Boolean @default(false)
  
  // Channel members
  members     TeamChannelMember[]
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([teamId])
  @@index([channelType])
  @@index([isPublic])
}

// Team Channel Members
model TeamChannelMember {
  id          String   @id @default(cuid())
  channelId   String
  channel     TeamChannel @relation(fields: [channelId], references: [id])
  userId      String
  user        User     @relation("TeamChannelMember", fields: [userId], references: [id])
  
  // Member settings
  isAdmin     Boolean @default(false)
  isMuted     Boolean @default(false)
  joinedAt    DateTime @default(now())
  
  @@unique([channelId, userId])
  @@index([channelId])
  @@index([userId])
}

// Company and Team Enums
enum CompanySize {
  MICRO       // 1-10 employees
  SMALL       // 11-50 employees
  MEDIUM      // 51-200 employees
  LARGE       // 201-1000 employees
  ENTERPRISE  // 1000+ employees
}

enum FundingStage {
  PRE_SEED    // Idea stage
  SEED        // Early development
  SERIES_A    // Growth stage
  SERIES_B    // Expansion stage
  SERIES_C    // Scaling stage
  SERIES_D    // Pre-IPO
  IPO         // Public company
  ACQUIRED    // Company acquired
}

enum CompanyStatus {
  ACTIVE      // Operating normally
  INACTIVE    // Temporarily suspended
  SUSPENDED   // Under investigation
  DISSOLVED   // Company dissolved
  MERGED      // Merged with another company
}

enum CompanyVisibility {
  PUBLIC      // Visible to everyone
  PRIVATE     // Visible to members only
  CONFIDENTIAL // Visible to owners only
}

enum TagCategory {
  INDUSTRY    // Technology, Healthcare, Finance, etc.
  TECHNOLOGY  // AI, Blockchain, SaaS, etc.
  BUSINESS_MODEL // B2B, B2C, Marketplace, etc.
  GEOGRAPHY   // North America, Europe, Asia, etc.
  STAGE       // Startup, Growth, Scale, etc.
  CUSTOM      // Custom company-specific tags
}

enum TeamRole {
  LEAD        // Team leader
  SENIOR      // Senior team member
  MEMBER      // Regular team member
  JUNIOR      // Junior team member
  INTERN      // Intern or apprentice
}

enum TeamPermission {
  READ        // Read team information
  WRITE       // Create and edit team content
  ADMIN       // Manage team settings
  INVITE      // Invite new members
  REMOVE      // Remove members
  ANALYTICS   // Access team analytics
}

enum TeamStatus {
  ACTIVE      // Team is active
  INACTIVE    // Team is inactive
  ARCHIVED    // Team is archived
  DISBANDED   // Team has been disbanded
}

enum GoalStatus {
  DRAFT       // Goal is in draft
  ACTIVE      // Goal is active
  ON_TRACK    // Goal is on track
  AT_RISK     // Goal is at risk
  COMPLETED   // Goal is completed
  CANCELLED   // Goal is cancelled
}

enum GoalPriority {
  LOW         // Low priority goal
  MEDIUM      // Medium priority goal
  HIGH        // High priority goal
  CRITICAL    // Critical priority goal
}

// Subscription & Billing Models
model Subscription {
  id          String            @id @default(cuid())
  userId      String
  planId      String
  status      SubscriptionStatus @default(ACTIVE)
  startDate   DateTime          @default(now())
  endDate     DateTime?
  autoRenew   Boolean           @default(true)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // relations
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan        BillingPlan       @relation(fields: [planId], references: [id])
  invoices    Invoice[]

  @@index([userId])
  @@index([planId])
  @@index([status])
}

model BillingPlan {
  id          String            @id @default(cuid())
  name        String
  description String?
  price       Float
  currency    String            @default("USD")
  interval    BillingInterval   @default(MONTHLY)
  features    String[]          // JSON array of features
  isActive    Boolean           @default(true)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // relations
  subscriptions Subscription[]

  @@index([isActive])
}

model Invoice {
  id              String        @id @default(cuid())
  userId          String
  subscriptionId  String?
  amount          Float
  currency        String        @default("USD")
  status          InvoiceStatus @default(PENDING)
  dueDate         DateTime
  paidDate        DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // relations
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription    Subscription? @relation(fields: [subscriptionId], references: [id])
  payments        Payment[]

  @@index([userId])
  @@index([status])
  @@index([dueDate])
}

model Payment {
  id          String        @id @default(cuid())
  userId      String
  invoiceId   String
  amount      Float
  currency    String        @default("USD")
  method      PaymentMethod
  status      PaymentStatus @default(PENDING)
  transactionId String?
  metadata    Json?         // Additional payment data
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // relations
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoice     Invoice       @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([invoiceId])
  @@index([status])
}

// Subscription & Billing Enums
enum SubscriptionStatus {
  ACTIVE      // Subscription is active
  INACTIVE    // Subscription is inactive
  CANCELLED   // Subscription is cancelled
  EXPIRED     // Subscription has expired
  SUSPENDED   // Subscription is suspended
}

enum BillingInterval {
  MONTHLY     // Monthly billing
  QUARTERLY   // Quarterly billing
  YEARLY      // Yearly billing
  LIFETIME    // One-time payment
}

enum InvoiceStatus {
  DRAFT       // Invoice is in draft
  PENDING     // Invoice is pending payment
  PAID        // Invoice has been paid
  OVERDUE     // Invoice is overdue
  CANCELLED   // Invoice has been cancelled
  REFUNDED    // Invoice has been refunded
}

enum PaymentMethod {
  CREDIT_CARD // Credit card payment
  DEBIT_CARD  // Debit card payment
  BANK_TRANSFER // Bank transfer
  PAYPAL      // PayPal payment
  STRIPE      // Stripe payment
  CRYPTO      // Cryptocurrency payment
  CASH        // Cash payment
}

enum PaymentStatus {
  PENDING     // Payment is pending
  PROCESSING  // Payment is being processed
  COMPLETED   // Payment is completed
  FAILED      // Payment has failed
  CANCELLED   // Payment has been cancelled
  REFUNDED    // Payment has been refunded
}

// Platform Legal Pack Models
model PlatformLegalPack {
  id          String                    @id @default(cuid())
  userId      String
  status      PlatformLegalPackStatus   @default(PENDING)
  signedAt    DateTime?
  expiresAt   DateTime?
  createdAt   DateTime                  @default(now())
  updatedAt   DateTime                  @updatedAt

  // relations
  user        User                      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
}

model PlatformNDA {
  id          String        @id @default(cuid())
  userId      String
  status      NDAStatus     @default(PENDING)
  signedAt    DateTime?
  expiresAt   DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // relations
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
}

model ESignatureConsent {
  id          String                @id @default(cuid())
  userId      String
  consentType ESignatureConsentType
  status      ConsentStatus         @default(PENDING)
  signedAt    DateTime?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt

  // relations
  user        User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([consentType])
  @@index([status])
}

// Platform Legal Pack Enums
enum PlatformLegalPackStatus {
  PENDING     // Legal pack is pending signature
  SIGNED      // Legal pack has been signed
  EXPIRED     // Legal pack has expired
  REVOKED     // Legal pack has been revoked
}

enum NDAStatus {
  PENDING     // NDA is pending signature
  SIGNED      // NDA has been signed
  EXPIRED     // NDA has expired
  REVOKED     // NDA has been revoked
}

enum ESignatureConsentType {
  PLATFORM_TERMS    // Platform terms of service
  PRIVACY_POLICY    // Privacy policy consent
  COOKIE_CONSENT    // Cookie consent
  MARKETING_CONSENT // Marketing communications consent
  DATA_PROCESSING   // Data processing consent
}

enum ConsentStatus {
  PENDING     // Consent is pending
  GRANTED     // Consent has been granted
  REVOKED     // Consent has been revoked
  EXPIRED     // Consent has expired
}

// User Journey State Management Models
model UserJourneyState {
  id          String            @id @default(cuid())
  userId      String
  stageId     String
  status      JourneyStageStatus @default(NOT_STARTED)
  startedAt   DateTime?
  completedAt DateTime?
  metadata    Json?             // Additional stage-specific data
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // relations
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  stage       JourneyStage      @relation(fields: [stageId], references: [id])

  @@unique([userId, stageId])
  @@index([userId])
  @@index([stageId])
  @@index([status])
}

model JourneyStage {
  id          String            @id @default(cuid())
  name        String
  description String?
  order       Int
  isActive    Boolean           @default(true)
  gates       JourneyGate[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // relations
  userStates  UserJourneyState[]

  @@index([order])
  @@index([isActive])
}

model JourneyGate {
  id          String        @id @default(cuid())
  stageId     String
  name        String
  description String?
  gateType    GateType
  isRequired  Boolean       @default(true)
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // relations
  stage       JourneyStage  @relation(fields: [stageId], references: [id], onDelete: Cascade)

  @@index([stageId])
  @@index([gateType])
  @@index([isActive])
}

// User Journey Enums
enum JourneyStageStatus {
  NOT_STARTED // Stage has not been started
  IN_PROGRESS // Stage is in progress
  COMPLETED   // Stage has been completed
  BLOCKED     // Stage is blocked
  SKIPPED     // Stage has been skipped
}

enum GateType {
  SUBSCRIPTION    // Requires active subscription
  LEGAL_PACK      // Requires signed legal pack
  NDA             // Requires signed NDA
  CONTRACT        // Requires signed contract
  PAYMENT         // Requires payment
  VERIFICATION    // Requires email/phone verification
  PROFILE         // Requires complete profile
  DOCUMENT        // Requires document upload
  LAUNCH          // Requires launch readiness
  VENTURE         // Requires venture creation/participation
  TEAM            // Requires team creation/participation
  PROJECT         // Requires project creation/participation
  LEGAL_ENTITY    // Requires company/legal entity on file
  CUSTOM          // Custom gate logic
}

// ===== KYC/IDENTITY VERIFICATION MODELS =====

model KycVerification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Personal Information
  fullName    String
  dateOfBirth DateTime
  country     String
  phoneNumber String
  
  // Document Status
  governmentIdStatus    VerificationStatus @default(PENDING)
  proofOfAddressStatus  VerificationStatus @default(PENDING)
  
  // Verification Results
  overallStatus         VerificationStatus @default(PENDING)
  verifiedBy            String?
  verifiedAt            DateTime?
  rejectionReason       String?
  
  // Documents
  documents             KycDocument[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([overallStatus])
}

model KycDocument {
  id              String   @id @default(cuid())
  kycId           String
  kyc             KycVerification @relation(fields: [kycId], references: [id], onDelete: Cascade)
  
  documentType    DocumentType // GOVERNMENT_ID, PROOF_OF_ADDRESS
  fileName        String
  filePath        String
  fileHash        String
  
  status          VerificationStatus @default(PENDING)
  reviewedBy      String?
  reviewedAt      DateTime?
  rejectionReason String?
  
  createdAt       DateTime @default(now())

  @@index([kycId])
  @@index([documentType])
  @@index([status])
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
}

enum DocumentType {
  GOVERNMENT_ID
  PROOF_OF_ADDRESS
}

// ===== MULTI-FACTOR AUTHENTICATION MODELS =====

model MfaSetup {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  method      MfaMethod // AUTHENTICATOR, EMAIL, SMS
  secret      String?   // For authenticator apps
  backupCodes String[]  // Backup codes
  
  isActive    Boolean   @default(false)
  lastUsed    DateTime?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([method])
  @@index([isActive])
}

enum MfaMethod {
  AUTHENTICATOR
  EMAIL
  SMS
}
