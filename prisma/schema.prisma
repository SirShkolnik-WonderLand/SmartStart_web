generator client {
  provider = "prisma-client-js"
}

/// @seed="tsx prisma/seed.ts"

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // privacy
  profile       ProfilePrivacy?
  
  // tenancy (for future SaaS)
  tenantId      String?  @default("default")
  
  // gamification
  level         UserLevel @default(OWLET)
  xp            Int      @default(0)
  reputation    Int      @default(0)
  status        UserStatus @default(ACTIVE)
  lastActive    DateTime @default(now())
  
  // Smart computed fields for portfolio insights
  totalPortfolioValue Float @default(0) // Computed from all projects
  activeProjectsCount Int @default(0)   // Computed from active memberships
  totalContributions  Int @default(0)   // Computed from contributions
  
  // Enhanced portfolio metrics
  totalEquityOwned    Float @default(0) // Total % ownership across all projects
  averageEquityPerProject Float @default(0) // Average ownership per project
  portfolioDiversity  Int @default(0)   // Number of different project types
  lastEquityEarned   DateTime? // Last time equity was earned
  
  // relations
  projectsOwned Project[] @relation("ProjectOwner")
  contributions Contribution[]
  messages      Message[] @relation("UserMessages")
  messageReactions MessageReaction[] @relation("UserMessageReactions")
  kudos         Kudos[]   @relation("UserKudos")
  assignedTasks Task[]    @relation("TaskAssignee")
  ideas         Idea[]    @relation("UserIdeas")
  pollVotes     PollVote[] @relation("UserPollVotes")
  kudosGiven    Kudos[]   @relation("UserKudosGiven")
  meshItems     MeshItem[] @relation("MeshItemAuthor")
  meshReactions MeshReaction[] @relation("UserMeshReactions")
  userBadges    UserBadge[]
  userSkills    UserSkill[]
  
  // Enhanced contract relations
  contractOffers ContractOffer[] @relation("ContractOfferRecipient")
  contractSignatures ContractSignature[] @relation("ContractSignatureSigner")
  equityVesting EquityVesting[] @relation("EquityVestingBeneficiary")
  
  // auth & membership
  account       Account?
  projectMemberships ProjectMember[]
  notifications Notification[]
  
  // Smart activity tracking
  activityLog   UserActivity[]
  
  @@index([tenantId])
  @@index([status])
  @@index([level])
  @@index([totalPortfolioValue])
  @@index([activeProjectsCount])
  @@index([totalEquityOwned])
  @@index([lastEquityEarned])
}

model ProfilePrivacy {
  id                 String  @id @default(cuid())
  userId             String  @unique
  user               User    @relation(fields: [userId], references: [id])
  showExactPercToHub Boolean @default(false)
  showActivity       Boolean @default(true)
  showSkills         Boolean @default(true)
  showReputation     Boolean @default(true)
}

model Project {
  id            String   @id @default(cuid())
  name          String
  summary       String?
  ownerId       String
  owner         User     @relation("ProjectOwner", fields: [ownerId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  deletedAt     DateTime?
  
  // tenancy (for future SaaS)
  tenantId      String?  @default("default")
  
  // Smart project metrics
  totalValue    Float @default(0)        // Computed from cap table
  activeMembers Int @default(0)          // Computed from active memberships
  completionRate Float @default(0)       // Computed from tasks
  lastActivity  DateTime @default(now()) // Computed from latest activity
  
  // Enhanced project contract settings
  contractVersion String @default("v1.0") // Contract version for tracking changes
  equityModel    EquityModel @default(DYNAMIC) // How equity is distributed
  vestingSchedule VestingSchedule @default(IMMEDIATE) // When equity vests
  
  // cap table entries
  capEntries    CapTableEntry[]
  sprints       Sprint[]
  tasks         Task[]
  ideas         Idea[]
  polls         Poll[]
  messages      Message[] @relation("ProjectMessages")
  meshItems     MeshItem[] @relation("MeshItemProject")
  
  // Enhanced contract relations
  contractOffers ContractOffer[] @relation("ContractOfferProject")
  contractSignatures ContractSignature[] @relation("ContractSignatureProject")
  equityVesting EquityVesting[] @relation("EquityVestingProject")
  
  // guardrails (enforced in service)
  ownerMinPct   Float    @default(35)
  aliceCapPct   Float    @default(25)
  reservePct    Float    @default(40)
  
  // membership & visibility
  members       ProjectMember[]
  visibility    ProjectVisibility?
  
  // Smart project insights
  insights      ProjectInsight[]
  
  @@index([tenantId])
  @@index([totalValue])
  @@index([completionRate])
  @@index([lastActivity])
  @@index([equityModel])
  @@index([vestingSchedule])
}

// New model for smart project insights
model ProjectInsight {
  id          String   @id @default(cuid())
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id])
  type        ProjectInsightType
  title       String
  description String
  priority    Int
  confidence  Float
  data        Json     // Flexible data storage
  createdAt   DateTime @default(now())
  expiresAt   DateTime?
  
  @@index([projectId])
  @@index([type])
  @@index([priority])
}

enum ProjectInsightType {
  PERFORMANCE
  COLLABORATION
  RISK
  OPPORTUNITY
  MILESTONE
}

model CapTableEntry {
  id         String     @id @default(cuid())
  projectId  String
  project    Project    @relation(fields: [projectId], references: [id])
  holderType HolderType
  holderId   String?
  pct        Float
  source     String
  createdAt  DateTime   @default(now())
  
  // Enhanced cap table tracking
  value      Float @default(0) // Computed value based on project total
  vestingDate DateTime? // When this equity vests
  isVested   Boolean @default(false) // Whether equity has vested
  
  // Contract tracking
  contractId String? // Reference to contract if applicable
  contributionId String? // Reference to contribution if applicable
  
  @@index([projectId])
  @@index([holderType])
  @@index([holderId])
  @@index([vestingDate])
  @@index([isVested])
  @@unique([projectId, holderType, holderId])
}

enum HolderType {
  OWNER
  ALICE
  USER
  RESERVE
}

model Sprint {
  id         String   @id @default(cuid())
  projectId  String
  project    Project  @relation(fields: [projectId], references: [id])
  start      DateTime
  end        DateTime
  goals      String
  exitCriteria String
  tasks      Task[]
  
  // Smart sprint metrics
  completionRate Float @default(0) // Computed from tasks
  velocity      Float @default(0)  // Computed from completed tasks
  
  @@index([projectId])
  @@index([start])
  @@index([end])
}

enum TaskType {
  CODE
  DESIGN
  GROWTH
  OPS
}

enum TaskStatus {
  TODO
  DOING
  REVIEW
  DONE
}

model Task {
  id         String   @id @default(cuid())
  sprintId   String?
  sprint     Sprint?  @relation(fields: [sprintId], references: [id])
  projectId  String
  project    Project  @relation(fields: [projectId], references: [id])
  title      String
  type       TaskType
  status     TaskStatus @default(TODO)
  assigneeId String?
  assignee   User?     @relation("TaskAssignee", fields: [assigneeId], references: [id])
  contributions Contribution[]
  
  // Smart task metrics
  effort     Int @default(0)      // Estimated effort in hours
  impact     Int @default(0)      // Impact score 1-5
  priority   Int @default(3)      // Priority 1-5
  dueDate    DateTime?
  
  @@index([projectId])
  @@index([assigneeId])
  @@index([status])
  @@index([priority])
  @@index([dueDate])
}

model Contribution {
  id            String   @id @default(cuid())
  taskId        String
  task          Task     @relation(fields: [taskId], references: [id])
  contributorId String
  contributor   User     @relation(fields: [contributorId], references: [id])
  effort        Int
  impact        Int
  proposedPct   Float
  finalPct      Float?
  acceptedAt    DateTime?
  acceptedById  String?
  status        ContributionStatus @default(PENDING)
  
  // Enhanced contribution tracking
  quality       Int @default(3)   // Quality score 1-5
  collaboration Int @default(3)   // Collaboration score 1-5
  
  // Contract integration
  contractOfferId String? // Link to contract offer
  equityGranted  Float?  // Final equity granted
  vestingSchedule VestingSchedule @default(IMMEDIATE)
  
  // Performance metrics
  completionTime Int? // Time to complete in hours
  stakeholderSatisfaction Int? // Satisfaction score 1-5
  
  @@index([taskId])
  @@index([contributorId])
  @@index([status])
  @@index([contractOfferId])
  @@index([equityGranted])
}

enum ContributionStatus {
  PENDING
  APPROVED
  REJECTED
}

model Idea {
  id         String   @id @default(cuid())
  projectId  String?
  project    Project? @relation(fields: [projectId], references: [id])
  proposerId String
  proposer   User     @relation("UserIdeas", fields: [proposerId], references: [id])
  title      String
  body       String
  status     String
  votes      Int      @default(0)
  createdAt  DateTime @default(now())
  deletedAt  DateTime?
  
  // Smart idea metrics
  priority   Int @default(3)      // Priority 1-5
  impact     Int @default(3)      // Impact score 1-5
  effort     String?              // Estimated effort
  category   String?              // Idea category
  tags       String[]             // Flexible tags
  
  // Smart idea insights
  insights   IdeaInsight[]
  
  @@index([projectId])
  @@index([status])
  @@index([priority])
  @@index([votes])
}

// New model for smart idea insights
model IdeaInsight {
  id          String   @id @default(cuid())
  ideaId      String
  idea        Idea     @relation(fields: [ideaId], references: [id])
  type        String   // e.g., "trending", "collaboration", "opportunity"
  score       Float    // Insight score
  data        Json     // Flexible data storage
  createdAt   DateTime @default(now())
  
  @@index([ideaId])
  @@index([type])
}

model Poll {
  id         String   @id @default(cuid())
  projectId  String?
  project    Project? @relation(fields: [projectId], references: [id])
  question   String
  type       String
  closesAt   DateTime
  votes      PollVote[]
  
  // Smart poll metrics
  totalVotes Int @default(0)      // Computed from votes
  isActive   Boolean @default(true) // Computed from closesAt
  
  @@index([projectId])
  @@index([closesAt])
  @@index([isActive])
}

model PollVote {
  id       String @id @default(cuid())
  pollId   String
  poll     Poll   @relation(fields: [pollId], references: [id])
  voterId  String
  voter    User   @relation("UserPollVotes", fields: [voterId], references: [id])
  value    String
  createdAt DateTime @default(now())
  
  @@unique([pollId, voterId])
  @@index([pollId])
  @@index([voterId])
}

model Message {
  id         String  @id @default(cuid())
  projectId  String?
  project    Project? @relation("ProjectMessages", fields: [projectId], references: [id])
  authorId   String
  author     User    @relation("UserMessages", fields: [authorId], references: [id])
  body       String
  createdAt  DateTime @default(now())
  deletedAt  DateTime?
  
  // Smart message features
  type       MessageType @default(GENERAL)
  priority   Int @default(3)      // Priority 1-5
  reactions  MessageReaction[]
  
  @@index([projectId])
  @@index([authorId])
  @@index([type])
  @@index([createdAt])
}

enum MessageType {
  GENERAL
  ANNOUNCEMENT
  QUESTION
  UPDATE
  CELEBRATION
}

// New model for message reactions
model MessageReaction {
  id        String   @id @default(cuid())
  messageId String
  message   Message  @relation(fields: [messageId], references: [id])
  userId    String
  user      User     @relation("UserMessageReactions", fields: [userId], references: [id])
  emoji     String
  createdAt DateTime @default(now())
  
  @@unique([messageId, userId, emoji])
  @@index([messageId])
  @@index([userId])
}

model Kudos {
  id        String   @id @default(cuid())
  toUserId  String
  toUser    User     @relation("UserKudos", fields: [toUserId], references: [id])
  fromUserId String
  fromUser  User     @relation("UserKudosGiven", fields: [fromUserId], references: [id])
  message   String
  createdAt DateTime @default(now())
  
  // Smart kudos tracking
  category  String?              // Kudos category
  impact    Int @default(3)      // Impact score 1-5
  
  @@index([toUserId])
  @@index([fromUserId])
  @@index([category])
}

model AuditEvent {
  id        String   @id @default(cuid())
  actorId   String?
  entity    String
  action    String
  payload   Json
  createdAt DateTime @default(now())
  
  @@index([actorId])
  @@index([entity])
  @@index([createdAt])
}

model Account {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String?
  role      Role     @default(MEMBER)
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  
  @@index([email])
}

enum Role {
  SUPER_ADMIN
  ADMIN
  OWNER
  CONTRIBUTOR
  MEMBER
  VIEWER
  GUEST
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
}

enum UserLevel {
  OWLET
  NIGHT_WATCHER
  WISE_OWL
  SKY_MASTER
}

model ProjectMember {
  id        String      @id @default(cuid())
  projectId String
  userId    String
  role      ProjectRole @default(MEMBER)
  createdAt DateTime    @default(now())
  
  // Smart membership tracking
  isActive  Boolean @default(true)
  lastContribution DateTime?
  totalContributions Int @default(0)
  
  project   Project     @relation(fields: [projectId], references: [id])
  user      User        @relation(fields: [userId], references: [id])
  
  @@unique([projectId, userId])
  @@index([projectId])
  @@index([userId])
  @@index([isActive])
}

enum ProjectRole {
  OWNER
  MEMBER
  VIEWER
}

model ProjectVisibility {
  id                String  @id @default(cuid())
  projectId         String  @unique
  capTableHubMasked Boolean @default(true)
  tasksHubVisible   Boolean @default(false)
  ideasHubVisible   Boolean @default(true)
  pollsHubVisible   Boolean @default(true)
  
  project           Project @relation(fields: [projectId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  kind      String
  payload   Json
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  
  // Smart notification features
  priority  Int @default(3)      // Priority 1-5
  expiresAt DateTime?
  actionUrl String?              // URL to take action
  
  user      User     @relation(fields: [userId], references: [id])
  
  @@index([userId, read])
  @@index([createdAt])
  @@index([priority])
}

// New model for smart user activity tracking
model UserActivity {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  type        String   // e.g., "login", "contribution", "idea", "poll"
  entity      String?  // Related entity ID
  entityType  String?  // Type of entity
  data        Json     // Flexible data storage
  createdAt   DateTime @default(now())
  
  @@index([userId])
  @@index([type])
  @@index([createdAt])
}

// Enhanced Mesh and Community features

model MeshItem {
  id          String      @id @default(cuid())
  type        MeshItemType
  title       String
  description String
  authorId    String
  author      User        @relation("MeshItemAuthor", fields: [authorId], references: [id])
  projectId   String?
  project     Project?    @relation("MeshItemProject", fields: [projectId], references: [id])
  priority    MeshPriority @default(MEDIUM)
  metadata    Json?
  createdAt   DateTime    @default(now())
  
  // Smart mesh features
  impact      Int @default(3)      // Impact score 1-5
  urgency     Int @default(3)      // Urgency score 1-5
  tags        String[]             // Flexible tags
  
  reactions   MeshReaction[]
  
  @@index([authorId])
  @@index([projectId])
  @@index([type])
  @@index([createdAt])
  @@index([priority])
  @@index([impact])
}

enum MeshItemType {
  WIN
  MILESTONE
  NEED_HELP
  KUDOS
  IDEA_SPARK
  POLL_ACTIVE
  SPRINT_UPDATE
}

enum MeshPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model MeshReaction {
  id        String   @id @default(cuid())
  meshItemId String
  meshItem  MeshItem @relation(fields: [meshItemId], references: [id])
  userId    String
  user      User     @relation("UserMeshReactions", fields: [userId], references: [id])
  emoji     String
  createdAt DateTime @default(now())
  
  @@unique([meshItemId, userId, emoji])
  @@index([meshItemId])
  @@index([userId])
}

model Badge {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  icon        String
  condition   String   // JSON string describing how to earn
  createdAt   DateTime @default(now())
  
  // Smart badge features
  category    String?              // Badge category
  rarity      BadgeRarity @default(COMMON) // Badge rarity
  
  userBadges  UserBadge[]
}

enum BadgeRarity {
  COMMON
  UNCOMMON
  RARE
  EPIC
  LEGENDARY
}

model UserBadge {
  id       String   @id @default(cuid())
  userId   String
  badgeId  String
  earnedAt DateTime @default(now())
  
  user     User     @relation(fields: [userId], references: [id])
  badge    Badge    @relation(fields: [badgeId], references: [id])
  
  @@unique([userId, badgeId])
  @@index([userId])
  @@index([badgeId])
}

model Skill {
  id          String   @id @default(cuid())
  name        String   @unique
  category    String
  description String?
  createdAt   DateTime @default(now())
  
  // Smart skill features
  demand      Int @default(3)      // Market demand 1-5
  complexity  Int @default(3)      // Skill complexity 1-5
  
  userSkills  UserSkill[]
}

model UserSkill {
  id       String   @id @default(cuid())
  userId   String
  skillId  String
  level    Int      @default(1) // 1-5 scale
  createdAt DateTime @default(now())
  
  // Smart skill tracking
  verified   Boolean @default(false) // Skill verification
  endorsements Int @default(0)      // Number of endorsements
  
  user     User     @relation(fields: [userId], references: [id])
  skill    Skill    @relation(fields: [skillId], references: [id])
  
  @@unique([userId, skillId])
  @@index([userId])
  @@index([skillId])
  @@index([level])
}

model SystemSetting {
  id          String   @id @default(cuid())
  category    String
  key         String
  value       String
  description String?
  updatedAt   DateTime @updatedAt
  
  @@unique([category, key])
  @@index([category])
}

model CommunityInsight {
  id          String   @id @default(cuid())
  type        InsightType
  title       String
  description String
  priority    Int
  confidence  Float
  actionItems Json
  relevantUsers Json
  createdAt   DateTime @default(now())
  expiresAt   DateTime?
  
  // Smart insight features
  impact      Int @default(3)      // Impact score 1-5
  category    String?              // Insight category
  
  @@index([type])
  @@index([priority])
  @@index([createdAt])
  @@index([impact])
}

enum InsightType {
  TRENDING
  OPPORTUNITY
  COLLABORATION
  MILESTONE
}

// NEW MODELS FOR ENHANCED CONTRACT LOGIC

// Smart contract offers between users and projects
model ContractOffer {
  id              String   @id @default(cuid())
  projectId       String
  project         Project  @relation("ContractOfferProject", fields: [projectId], references: [id])
  recipientId     String
  recipient       User     @relation("ContractOfferRecipient", fields: [recipientId], references: [id])
  
  // Contract terms
  equityPercentage Float   // Equity offered (0.5% - 5%)
  vestingSchedule  VestingSchedule @default(IMMEDIATE)
  contributionType ContributionType
  effortRequired   Int     // Hours required
  impactExpected   Int     // Expected impact 1-5
  
  // Contract status
  status          ContractStatus @default(PENDING)
  expiresAt       DateTime // When offer expires
  acceptedAt      DateTime?
  rejectedAt      DateTime?
  
  // Contract details
  terms           String   // Contract terms and conditions
  deliverables    String[] // What needs to be delivered
  milestones      String[] // Key milestones
  
  // Metadata
  createdBy       String   // Who created the offer
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  signatures      ContractSignature[]
  equityVesting   EquityVesting[]
  
  @@index([projectId])
  @@index([recipientId])
  @@index([status])
  @@index([expiresAt])
  @@index([contributionType])
}

// Contract signatures for legal compliance
model ContractSignature {
  id              String   @id @default(cuid())
  contractId      String
  contract        ContractOffer @relation(fields: [contractId], references: [id])
  signerId        String
  signer          User     @relation("ContractSignatureSigner", fields: [signerId], references: [id])
  projectId       String
  project         Project  @relation("ContractSignatureProject", fields: [projectId], references: [id])
  
  // Signature details
  signatureHash   String   // Hash of signed content
  signedAt        DateTime @default(now())
  ipAddress       String?  // IP address of signer
  userAgent       String?  // Browser/device info
  
  // Legal compliance
  termsAccepted   Boolean  @default(false)
  privacyAccepted Boolean  @default(false)
  
  @@index([contractId])
  @@index([signerId])
  @@index([projectId])
  @@index([signedAt])
}

// Equity vesting schedules
model EquityVesting {
  id              String   @id @default(cuid())
  contractId      String
  contract        ContractOffer @relation(fields: [contractId], references: [id])
  beneficiaryId   String
  beneficiary     User     @relation("EquityVestingBeneficiary", fields: [beneficiaryId], references: [id])
  projectId       String
  project         Project  @relation("EquityVestingProject", fields: [projectId], references: [id])
  
  // Vesting details
  totalEquity     Float    // Total equity to be vested
  vestedEquity    Float    @default(0) // Currently vested equity
  vestingSchedule VestingSchedule
  vestingStart    DateTime // When vesting begins
  vestingEnd      DateTime // When vesting completes
  
  // Vesting milestones
  cliffDate       DateTime? // Cliff date if applicable
  vestingEvents  VestingEvent[]
  
  @@index([contractId])
  @@index([beneficiaryId])
  @@index([projectId])
  @@index([vestingStart])
  @@index([vestingEnd])
}

// Individual vesting events
model VestingEvent {
  id              String   @id @default(cuid())
  vestingId       String
  vesting         EquityVesting @relation(fields: [vestingId], references: [id])
  
  // Event details
  equityAmount    Float    // Equity vested in this event
  vestingDate     DateTime // When this equity vested
  eventType       VestingEventType
  
  @@index([vestingId])
  @@index([vestingDate])
}

// Enhanced enums for new functionality
enum EquityModel {
  DYNAMIC    // Equity based on contribution value
  FIXED      // Fixed equity amounts
  HYBRID     // Combination of fixed and dynamic
}

enum VestingSchedule {
  IMMEDIATE  // Equity vests immediately
  MONTHLY    // Monthly vesting over time
  QUARTERLY  // Quarterly vesting
  ANNUAL     // Annual vesting
  MILESTONE  // Vesting based on milestones
  CLIFF      // Cliff vesting with delay
}

enum ContributionType {
  CODE        // Software development
  DESIGN      // UI/UX design
  GROWTH      // Marketing and growth
  OPS         // Operations and management
  SALES       // Sales and business development
  LEGAL       // Legal and compliance
  FINANCE     // Financial planning
  STRATEGY    // Strategic planning
  RESEARCH    // Research and development
  OTHER       // Other contributions
}

enum ContractStatus {
  DRAFT       // Contract is being drafted
  PENDING     // Waiting for recipient response
  ACCEPTED    // Contract accepted
  REJECTED    // Contract rejected
  EXPIRED     // Contract expired
  COMPLETED   // Contract completed
  TERMINATED  // Contract terminated
}

enum VestingEventType {
  INITIAL     // Initial vesting
  MILESTONE   // Milestone-based vesting
  TIME_BASED  // Time-based vesting
  PERFORMANCE // Performance-based vesting
  ACCELERATION // Accelerated vesting
}
