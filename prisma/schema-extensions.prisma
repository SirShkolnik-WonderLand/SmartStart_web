// ===== ADVANCED CONTRACTS SYSTEM SCHEMA EXTENSIONS =====
// These models extend the existing schema for advanced legal features

// Contract Amendments
model ContractAmendment {
  id                    String              @id @default(cuid())
  originalContractId    String
  amendmentType         AmendmentType
  reason                String
  changes               String              // JSON string of changes
  version               String
  status                AmendmentStatus     @default(PENDING)
  requiresApproval      Boolean             @default(true)
  approvalDeadline      DateTime?
  notificationRecipients String             // JSON string of recipients
  effectiveDate         DateTime?
  proposedBy            String
  approvedBy            String?
  approvedAt            DateTime?
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt

  // Relations
  originalContract      LegalDocument       @relation("ContractAmendments", fields: [originalContractId], references: [id])
  amendmentSignatures   AmendmentSignature[]

  @@index([originalContractId])
  @@index([status])
  @@index([amendmentType])
  @@index([proposedBy])
}

// Amendment Signatures
model AmendmentSignature {
  id           String              @id @default(cuid())
  amendmentId  String
  signerId     String
  role         String              // APPROVER, REVIEWER, etc.
  required     Boolean             @default(true)
  status       AmendmentSignatureStatus @default(PENDING)
  deadline     DateTime?
  signedAt     DateTime?
  signatureHash String?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt

  // Relations
  amendment    ContractAmendment   @relation(fields: [amendmentId], references: [id])
  signer       User                @relation("AmendmentSignatureSigner", fields: [signerId], references: [id])

  @@index([amendmentId])
  @@index([signerId])
  @@index([status])
}

// Contract Enforcement
model ContractEnforcement {
  id               String              @id @default(cuid())
  contractId       String
  enforcementAction EnforcementAction
  reason           String
  evidence         String              // JSON string of evidence
  legalBasis       String
  jurisdiction     String              @default("CA")
  status           EnforcementStatus  @default(ACTIVE)
  initiatedAt      DateTime            @default(now())
  resolutionDate   DateTime?
  outcome          String?             // RESOLVED, DISMISSED, etc.
  initiatedBy      String
  resolvedBy       String?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt

  // Relations
  contract         LegalDocument       @relation("ContractEnforcements", fields: [contractId], references: [id])

  @@index([contractId])
  @@index([status])
  @@index([enforcementAction])
  @@index([initiatedBy])
}

// Multi-Party Signature Requirements
model MultiPartyRequirement {
  id           String              @id @default(cuid())
  contractId   String
  role         String              // FOUNDER, CONTRIBUTOR, INVESTOR, etc.
  signerId     String
  required     Boolean             @default(true)
  order        Int                 @default(0) // Signature order
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt

  // Relations
  contract     LegalDocument       @relation("MultiPartyRequirements", fields: [contractId], references: [id])
  signer       User                @relation("MultiPartyRequirementSigner", fields: [signerId], references: [id])

  @@index([contractId])
  @@index([signerId])
  @@index([role])
}

// Signature Verification Records
model SignatureVerification {
  id               String              @id @default(cuid())
  signatureId      String
  verificationMethod String            @default("CRYPTOGRAPHIC")
  results          String              // JSON string of verification results
  verifiedBy       String
  verifiedAt       DateTime            @default(now())
  createdAt        DateTime            @default(now())

  // Relations
  signature        LegalDocumentSignature @relation(fields: [signatureId], references: [id])

  @@index([signatureId])
  @@index([verificationMethod])
  @@index([verifiedAt])
}

// Template Version History
model TemplateVersionHistory {
  id                   String              @id @default(cuid())
  originalTemplateId   String
  newVersionId         String
  versionNumber        String
  changes              String              // JSON string of changes
  reason               String
  createdBy            String
  requiresApproval     Boolean             @default(true)
  status               VersionStatus       @default(PENDING_APPROVAL)
  approvedBy           String?
  approvedAt           DateTime?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt

  // Relations
  originalTemplate     LegalDocument       @relation("OriginalTemplateVersions", fields: [originalTemplateId], references: [id])
  newVersion           LegalDocument       @relation("NewTemplateVersions", fields: [newVersionId], references: [id])

  @@index([originalTemplateId])
  @@index([newVersionId])
  @@index([status])
  @@index([createdBy])
}

// Compliance Records
model ComplianceRecord {
  id               String              @id @default(cuid())
  contractId       String
  complianceType   ComplianceType
  status           ComplianceStatus    @default(PENDING)
  checkDate        DateTime            @default(now())
  nextCheckDate    DateTime?
  details          String              // JSON string of compliance details
  violations       String?             // JSON string of violations
  correctiveActions String?            // JSON string of actions
  checkedBy        String
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt

  // Relations
  contract         LegalDocument       @relation("ContractComplianceRecords", fields: [contractId], references: [id])

  @@index([contractId])
  @@index([complianceType])
  @@index([status])
  @@index([checkDate])
}

// Legal Rules Engine
model LegalRule {
  id               String              @id @default(cuid())
  ruleName         String              @unique
  ruleType         LegalRuleType
  jurisdiction     String              @default("CA")
  description      String
  ruleLogic        String              // JSON string of rule logic
  conditions       String              // JSON string of conditions
  actions          String              // JSON string of actions
  priority         Int                 @default(0)
  isActive         Boolean             @default(true)
  createdBy        String
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt

  @@index([ruleType])
  @@index([jurisdiction])
  @@index([isActive])
  @@index([priority])
}

// Legal Rule Executions
model LegalRuleExecution {
  id               String              @id @default(cuid())
  ruleId           String
  contractId       String
  executionDate    DateTime            @default(now())
  inputData        String              // JSON string of input data
  outputData       String              // JSON string of output data
  status           ExecutionStatus     @default(SUCCESS)
  errorMessage     String?
  executionTime    Int                 // milliseconds
  createdBy        String
  createdAt        DateTime            @default(now())

  // Relations
  rule             LegalRule           @relation(fields: [ruleId], references: [id])
  contract         LegalDocument       @relation("ContractRuleExecutions", fields: [contractId], references: [id])

  @@index([ruleId])
  @@index([contractId])
  @@index([executionDate])
  @@index([status])
}

// ===== ENUMS =====

enum AmendmentType {
  MINOR_CHANGES
  MAJOR_CHANGES
  TERMINATION
  EXTENSION
  MODIFICATION
  CORRECTION
  COMPLIANCE_UPDATE
  LEGAL_REQUIREMENT
}

enum AmendmentStatus {
  PENDING
  APPROVED
  REJECTED
  WITHDRAWN
  EFFECTIVE
  EXPIRED
}

enum AmendmentSignatureStatus {
  PENDING
  SIGNED
  REJECTED
  EXPIRED
}

enum EnforcementAction {
  BREACH_NOTICE
  CURE_PERIOD
  TERMINATION
  DAMAGES_CLAIM
  INJUNCTION
  ARBITRATION
  LITIGATION
  SETTLEMENT
}

enum EnforcementStatus {
  ACTIVE
  RESOLVED
  DISMISSED
  SETTLED
  APPEALED
  CLOSED
}

enum VersionStatus {
  PENDING_APPROVAL
  APPROVED
  REJECTED
  WITHDRAWN
}

enum ComplianceType {
  REGULATORY
  CONTRACTUAL
  LEGAL
  OPERATIONAL
  FINANCIAL
  ENVIRONMENTAL
  SECURITY
  PRIVACY
}

enum ComplianceStatus {
  PENDING
  PASSED
  FAILED
  WARNING
  EXEMPT
}

enum LegalRuleType {
  VALIDATION
  ENFORCEMENT
  COMPLIANCE
  AMENDMENT
  TERMINATION
  SIGNATURE
  VESTING
  EQUITY
}

enum ExecutionStatus {
  SUCCESS
  FAILED
  PARTIAL
  TIMEOUT
  ERROR
}

// ===== RELATIONSHIP EXTENSIONS =====

// Extend LegalDocument model
model LegalDocument {
  // ... existing fields ...
  
  // New relations
  amendments            ContractAmendment[]    @relation("ContractAmendments")
  enforcements          ContractEnforcement[]  @relation("ContractEnforcements")
  multiPartyRequirements MultiPartyRequirement[] @relation("MultiPartyRequirements")
  complianceRecords     ComplianceRecord[]     @relation("ContractComplianceRecords")
  ruleExecutions        LegalRuleExecution[]   @relation("ContractRuleExecutions")
  
  // Versioning support
  isVersionOf           String?
  originalTemplate      LegalDocument?         @relation("OriginalTemplateVersions", fields: [isVersionOf], references: [id])
  versions              LegalDocument[]        @relation("NewTemplateVersions")
}

// Extend LegalDocumentSignature model
model LegalDocumentSignature {
  // ... existing fields ...
  
  // New fields
  role                  String?
  signatureMethod       String              @default("DIGITAL")
  
  // New relations
  verifications         SignatureVerification[]
}

// Extend User model
model User {
  // ... existing fields ...
  
  // New relations
  amendmentSignatures   AmendmentSignature[]    @relation("AmendmentSignatureSigner")
  multiPartyRequirements MultiPartyRequirement[] @relation("MultiPartyRequirementSigner")
}

// Extend LegalRule model
model LegalRule {
  // ... existing fields ...
  
  // New relations
  executions             LegalRuleExecution[]
}

// ===== INDEXES FOR PERFORMANCE =====

// Performance indexes for advanced queries
@@index([contractId, status], name: "contract_enforcement_status")
@@index([contractId, amendmentType], name: "contract_amendment_type")
@@index([signatureId, verificationMethod], name: "signature_verification_method")
@@index([ruleId, executionDate], name: "rule_execution_date")
@@index([contractId, complianceType], name: "contract_compliance_type")
