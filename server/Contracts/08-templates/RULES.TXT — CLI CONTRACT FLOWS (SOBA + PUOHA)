got it — here’s a **copy-pasteable plain-text** spec you can drop into your repo as
`/documentation/rules.txt` (fits your tree and the contracts you already added).
It defines **CLI prompts, validation, derived fields, hash/e-sign capture, storage paths, and events** for the two flows:

* **SOBA** (Seat Order & Billing Authorization)
* **PUOHA** (Project Upgrade Order & Hosting Addendum)

---

# RULES.TXT — CLI CONTRACT FLOWS (SOBA + PUOHA)

## 0) GLOBAL CONVENTIONS

* **Encoding:** UTF-8. Newlines = `\n`.
* **Dates:** ISO `YYYY-MM-DD`. Validate with regex: `^\d{4}-\d{2}-\d{2}$`.
* **Currency:** CAD; store cents as integer (e.g., `$100.00` → `10000`).
* **Booleans:** `Y` or `N`.
* **Emails:** `^[^\s@]+@[^\s@]+\.[^\s@]+$` (basic).
* **UUID v4:** `^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$` (case-insensitive).
* **Domain (simple):** `^[a-z0-9.-]+\.[a-z]{2,}$` (lowercase).
* **Phone (optional):** accept E.164 or local; store raw.

### Canonicalization & Hash (for signature)

* Build the **final document text** by substituting variables into the approved template (no hidden fields).
* Canonicalize before hashing:

  1. Normalize line endings to `\n`.
  2. Trim trailing spaces per line.
  3. Collapse multiple blank lines to a single blank line.
  4. Remove any non-printable characters.
* Compute **SHA-256** over the canonicalized text; hex-encode lowercase.
* Store in `documents.hash` and also print at the end:
  `DOC HASH (sha256): <64-hex>`.

### E-Sign Evidence (collect for each signer)

* `signer_name`, `signer_title`, `signer_email`, `ip`, `user_agent`, `timestamp_iso`, `otp_or_mfa_code_last4` (if available), `doc_hash_sha256`.
* Persist under `documents_signatures` table/collection and embed in the document footer block.

### Storage Paths (recommended to match your tree)

* Final PDFs/TXT: `/server/Contracts/signed/`
* Templates: `/server/Contracts/templates/`
* Raw JSON payloads: `/server/Contracts/payloads/`
* API: use your `documents-api.js` (POST `/api/documents/issue`, POST `/api/documents/sign`).

### Events to emit

* `document.drafted` → after payload validated & doc rendered
* `document.issued` → after doc stored & hash computed
* `document.signed` → on each signature
* `document.fully_executed` → after all signatures
* `billing.seats.updated` (SOBA)
* `project.upgrades.updated` (PUOHA)

---

## 1) FLOW: **SOBA — Seat Order & Billing Authorization**

### Constants

* `BASE_SEAT_FEE_CENTS = 10000`  // CAD \$100.00
* `CYCLE_DAYS = days_in_month(issue_date)`  // 28–31

### Prompts (in order)

1. **Subscriber Legal Name**

   * id: `subscriber_legal_name`
   * prompt: “Subscriber legal name (company or individual)?”
   * validate: non-empty, 2–120 chars.

2. **Effective Date**

   * id: `effective_date`
   * prompt: “Effective date (YYYY-MM-DD)?”
   * validate: ISO date; `>= today`.

3. **Project/Org Domain**

   * id: `project_domain`
   * prompt: “Project email domain to provision (e.g., examplehub.ca)?”
   * validate: domain regex.

4. **Seats Count**

   * id: `seats_count`
   * prompt: “How many seats to activate now?”
   * validate: integer `>= 1` and `<= 500`.

5. **Seat Roster** (repeat `n = seats_count`)

   * group id: `seats[i]`
   * fields & prompts per seat:

     * `full_name`  — “Seat #i full name?” (2–80 chars)
     * `local_part` — “Seat #i email local-part (before @)?” (regex `^[a-z0-9._-]+$`)
     * **compose** `work_email = local_part + '@' + project_domain`
     * `role`       — “Role (e.g., Engineer, PM, Legal)?” (1–40 chars)
     * `intune_ready` — “Device enrolled in Intune (Y/N)?” (Y/N)
     * `start_date` — “Seat #i activation date (YYYY-MM-DD)?” (ISO `>= effective_date`)

6. **Billing Email**

   * id: `billing_email`
   * prompt: “Billing email (AP contact)?”
   * validate: email regex.

7. **Billing Address**

   * id: `billing_address`
   * prompt: “Billing address (single line or multi-line)?”
   * validate: non-empty.

8. **Payment Token Ref**

   * id: `payment_token_ref`
   * prompt: “Payment method token/reference from PSP?”
   * validate: non-empty (store masked if contains PAN tail).

9. **Proration Choice**

   * id: `proration_choice`
   * prompt: “Prorate first month if activation mid-cycle? (Y/N)”
   * validate: Y/N.

10. **Policy Confirmations** (all must be `Y`)

* `accept_non_refundable` — “Confirm current cycle is non-refundable (B2B)? (Y/N)”
* `accept_security_baseline` — “Confirm MFA + Intune + Defender required? (Y/N)”
* `accept_ptsa_binding` — “Confirm PTSA/PPA/NDA/DPA apply to this order? (Y/N)”

### Derived Fields

* `seats_subtotal_cents = seats_count * BASE_SEAT_FEE_CENTS`
* **Proration** (if any seat’s `start_date` > `effective_date` and `proration_choice == 'Y'`):
  For seat `i`:
  `days_used = CYCLE_DAYS - day(start_date_i) + 1`
  `seat_i_prorated_cents = round(BASE_SEAT_FEE_CENTS * (days_used / CYCLE_DAYS))`
  `first_cycle_total_cents = sum(seat_i_prorated_cents)`
  Else: `first_cycle_total_cents = seats_subtotal_cents`
* `next_cycles_total_cents = seats_subtotal_cents`
* `tax_rate` → from tenant settings (default 0 if not set).
* `totals_with_tax = round(first_cycle_total_cents * (1 + tax_rate))`.

### Blocking Validations

* `seats_count == number_of(seats[])`.
* All seat `start_date` within the **current** billing month or equal to `effective_date`.
* All policy confirmations == `Y`.
* Every seat has unique `work_email`.

### Render → Hash → Sign

* Render the approved **SOBA** template with variables.
* Canonicalize and compute **sha256** (see §0).
* Show **Summary**:

  * Seats: `seats_count`
  * First cycle total (CAD): `first_cycle_total_cents/100`
  * Next cycles total (CAD): `next_cycles_total_cents/100`
  * Tax rate and totals
  * `DOC HASH`
* Collect **e-sign evidence** for **AliceSolutions** signer and **Subscriber** signer.
* Persist payload (JSON), document text (TXT/PDF), hash, and evidence.
* Emit `document.fully_executed` and `billing.seats.updated`.

### Storage Filenames

* TXT: `/server/Contracts/signed/SOBA_<tenantId>_<yyyyMMdd>_<docId>.txt`
* PDF (if rendered): same prefix with `.pdf`.
* Payload: `/server/Contracts/payloads/SOBA_<docId>.json`

---

## 2) FLOW: **PUOHA — Project Upgrade Order & Hosting Addendum**

### Prompts (in order)

1. **Project Owner (Legal Name)**

   * id: `project_owner_legal_name`
   * prompt: “Project Owner legal name (payer entity)?”
   * validate: non-empty, 2–120 chars.

2. **Project Name/ID**

   * id: `project_id`
   * prompt: “Project Name/ID?”
   * validate: 2–80 chars.

3. **Effective Date**

   * id: `effective_date`
   * prompt: “Effective date (YYYY-MM-DD)?”
   * validate: ISO `>= today`.

4. **Baseline Stack Confirmation** (must be ON)

   * `m365_on` (Y), `entra_mfa_on` (Y), `intune_defender_on` (Y), `github_org_on` (Y), `cicd_secrets_on` (Y), `backups_logs_on` (Y), `dlp_on` (Y)
   * prompt: “Confirm baseline stack is ON (Y/N for each).”
   * validation: all must be `Y` unless an **exception** is filed (see §Exceptions).

5. **Data Residency**

   * id: `residency`
   * prompt: “Data residency (default CA). If adding regions, list comma-separated (needs Legal approval).”
   * validate: either `CA` or list of ISO country codes/domains; if not `CA`-only → flag for Legal approval.

6. **Render.com Plan** (optional upgrade)

   * `render_plan` ∈ {NONE, STARTER, PRO, ENTERPRISE}
   * `render_region` (string; optional if NONE)
   * `render_autoscale` (Y/N)
   * `render_monthly_est_cad` (currency; allow `0.00` if NONE).

7. **Database/Storage** (0..N items; loop)

   * for each `db[i]`:

     * `type` ∈ {POSTGRES, REDIS, OBJECT}
     * `provider` (text)
     * `tier` (text)
     * `ha_backup_rpo_hours` (int ≥ 0)
     * `rto_hours` (int ≥ 0)
     * `monthly_est_cad` (currency)

8. **GitHub Advanced Security**

   * `gh_advsec_enabled` (Y/N)
   * `repos_in_scope` (comma list, required if Y)
   * `gh_monthly_est_cad` (currency; `> 0` if Y)

9. **Security/Testing Add-ons** (multi-select)

   * `sast` (Y/N), `dast` (Y/N), `dep_sbom` (Y/N), `container_scan` (Y/N), `pentest` (NONE / ONE-OFF / RECURRING)
   * `sec_vendor` (text), `sec_monthly_or_oneoff_cad` (currency)

10. **Monitoring/Telemetry**

* `apm` (Y/N), `logs_gb_month` (int ≥ 0), `metrics` (Y/N), `traces` (Y/N)
* `mon_vendor` (text), `mon_monthly_est_cad` (currency)

11. **Other Add-ons**

* free text `other_desc` (optional), `other_monthly_est_cad` (currency; allow 0).

12. **Payer Confirmation**

* `payer_entity` (legal name; non-empty)
* `billing_email` (email)
* `payment_token_ref` (string)
* `agree_recurring` — “Payer agrees to recurring monthly charges until downgraded/terminated? (Y/N)” (must be `Y`).

13. **Approvals Needed** (auto)

* Security approval required if: any **Tier 2/3** data + exceptions or high-risk add-ons.
* Legal approval required if: **residency != CA** or new sub-processors.

### Derived Fields

* `est_render = cad_to_cents(render_monthly_est_cad)`
* `est_db_total = sum(cad_to_cents(db[i].monthly_est_cad))`
* `est_gh = cad_to_cents(gh_monthly_est_cad)`
* `est_sec = cad_to_cents(sec_monthly_or_oneoff_cad)`  // recurring part only
* `est_mon = cad_to_cents(mon_monthly_est_cad)`
* `est_other = cad_to_cents(other_monthly_est_cad)`
* **Estimated Monthly Total (cents):**
  `est_total_cents = est_render + est_db_total + est_gh + est_sec + est_mon + est_other`
* **Tax:** apply tenant `tax_rate` if set.
* Print **line-item table** in the summary before signature.

### Exceptions (Tooling)

* If any baseline toggle in step 4 is `N`, open **Exception Log** entry:

  * fields: `tool`, `reason`, `mitigation`, `start_date`, `expiry_date` (max 90 days), `approved_by_security`, `approved_by_legal` (Y/N each).
  * block signature unless pending approvals are satisfied.

### Blocking Validations

* `agree_recurring == 'Y'`.
* If `gh_advsec_enabled == 'Y'` → `repos_in_scope` not empty.
* Any currency fields: regex `^\d+(\.\d{2})?$`.
* Residency: if contains non-CA regions → require `legal_approval == Y` before finalization.

### Render → Hash → Sign

* Render approved **PUOHA** template with variables + **Schedules A–D** (stack snapshot, estimate breakdown, exception log, downgrade/termination).
* Canonicalize & **sha256** the text; display hash.
* Collect signatures: **Project Owner**, **AliceSolutions**, plus **Security** and **Legal** approvers if flagged.
* Persist and emit `project.upgrades.updated`.

### Storage Filenames

* TXT: `/server/Contracts/signed/PUOHA_<projectId>_<yyyyMMdd>_<docId>.txt`
* PDF: same prefix with `.pdf`.
* Payload: `/server/Contracts/payloads/PUOHA_<docId>.json`

---

## 3) ERROR HANDLING & UX MESSAGES

* **Validation fail:** print first error with field id; do not render doc; keep inputs in memory for correction.
* **Payment token missing/invalid:** show “Payment method not on file — add a method in Billing, then retry.”
* **Signer mismatch:** if `signer_email` not equal to expected account → “Use the account invited to sign.”
* **Hash mismatch on sign:** “Document changed after preview. Re-generate and sign again.” (rebuild, recompute sha256).

---

## 4) CLI SUMMARY TEMPLATES (printed before signature)

### SOBA SUMMARY

```
SOBA – Seat Order Summary
Subscriber: {subscriber_legal_name}
Domain: {project_domain}
Seats: {seats_count}
First-cycle total (CAD): {first_cycle_total_cents/100:.2f}
Next cycles (CAD): {next_cycles_total_cents/100:.2f}
Tax rate: {tax_rate*100:.2f}%  | First-cycle w/ tax: {totals_with_tax/100:.2f}
DOC HASH (sha256): {doc_hash}
```

### PUOHA SUMMARY

```
PUOHA – Project Upgrades Summary
Project: {project_id} | Payer: {payer_entity}
Residency: {residency}
Line items (CAD/mo): Render={est_render/100:.2f} DBs={est_db_total/100:.2f} GH-AS={est_gh/100:.2f} Sec/Testing={est_sec/100:.2f} Monitoring={est_mon/100:.2f} Other={est_other/100:.2f}
Estimated total (CAD/mo): {est_total_cents/100:.2f} (+ tax if applicable)
Approvals required: Security={needs_sec_approval} Legal={needs_legal_approval}
DOC HASH (sha256): {doc_hash}
```

---

## 5) INDEXING & SEARCH KEYS

When saving each doc, also index:

* `doc_type` ∈ {SOBA, PUOHA}
* `tenantId`, `projectId` (PUOHA), `subscriberId` (SOBA), `issue_date`, `signers[]`, `total_cents_first_cycle`, `monthly_est_total_cents`
* `status` ∈ {drafted, issued, partially\_signed, fully\_executed, voided}

---

## 6) PERMISSIONS

* Only users with roles:

  * **Billing.Admin** or **Org.Owner** can issue/sign **SOBA** (subscriber side).
  * **Project.Owner** or **Org.Owner** can issue **PUOHA**; **Security.Admin**/**Legal.Admin** must sign if approvals flagged.
* Documents are **readable** by: Org.Owner, Billing.Admin, Security.Admin, Legal.Admin.
* Editing after issue: **not allowed**; use **amendment** (new doc id, link to prior).

---

*End of rules.txt*
