SECRETS & KEY MANAGEMENT POLICY
AliceSolutions Ventures Inc. — Hub & Ventures
Version: 1.0 • Owner: CISO • Effective: on publication

0) PURPOSE & SCOPE
Define how we create, store, use, rotate, audit, and retire all secrets and cryptographic keys used by the Hub and ventures (app creds, API tokens, DB passwords, OAuth credentials, signing keys, KMS/HSM keys). Applies to all tiers (T0–T3); enforce the HIGHEST tier present.

0.1 REFERENCES
• Security Controls Master (SC-30/31) • Access Control Policy • Logging & Monitoring Standard
• Incident Response Plan • Change/Release Policy • Data Classification Standard • STHCA

1) DEFINITIONS
Secret: Any credential or material that grants access or proves identity (passwords, API keys, tokens, connection strings, private keys).
Key Material: Cryptographic keys (KMS/HSM keys, signing keys, TLS private keys).
Secrets Manager (“Vault”): The designated system for secret storage (e.g., Azure Key Vault/HashiCorp Vault).

2) PRINCIPLES
• Secrets are NEVER committed to code, tickets, chat, or docs.
• Prefer short-lived, federated identities (OIDC/GitHub → cloud tokens) over static keys.
• Least privilege scopes; environment isolation; time-boxed access.
• Deterministic rotation windows by tier; rotate on signal immediately.
• Everything is logged, monitored, and auditable.

3) ROLES
• CISO (A): owner of policy; approves exceptions.
• SRE Lead (R): implements vaults/KMS/HSM; rotation automation; CI/CD bindings.
• Security.Admin (R): access policies, detection rules, secret scanning.
• Project.Owner/Eng Leads (R): define app secret needs; keep scopes minimal.
• Legal/DPO (C): residency/export limits for keys if applicable.

4) ARCHITECTURE
4.1 Storage
• Human-readable secrets: Vault with RBAC & audit logging. 
• Machine-to-machine: Vault or cloud KMS-backed secrets store; envelope encryption for large blobs.
• TLS private keys & signing keys: KMS/HSM where possible; otherwise vaulted with split access.

4.2 Access
• Bound to Entra ID groups and service principals; SSO enforced; MFA for operators.
• CI/CD uses **OIDC federation** to mint short-lived tokens bound to repo, branch, and workflow claims.

4.3 Environments
• Separate namespaces per env: `proj/<slug>/<env>/*`.
• No cross-env reads (prod secrets are only readable by prod workloads).

5) SECRET LIFECYCLE
5.1 Creation
• Create via ticket with owner, purpose, scope, expiry, tier, environment.
• Autogenerate (min): 32 bytes entropy for symmetric secrets; use approved libs/CLI.
• TLS: ECDSA P-256 or RSA-2048+; prefer provider-managed certs with auto-renew.

5.2 Distribution
• Only injected at runtime by platform/CI; never printed to logs; masked in pipelines.
• Local developer use: temporary dev tokens with TTL ≤ 8h; no prod access.

5.3 Rotation WINDOWS (minimum)
• T1: every 90 days
• T2: every 30 days
• T3: every 14–30 days (use 14 for crown-jewel paths)
Triggers for immediate rotation: suspected compromise, personnel change, scope change, repo made public, vendor breach advisory, IRP directive.

5.4 Revocation/Retirement
• Disable old version post-cutover; confirm no consumers; delete or archive per retention (7–30 days).
• Document in ticket; link to change record.

6) CI/CD & REPO CONTROLS
• GitHub: Secret Scanning ON (org level); push protection enabled.
• Protected branches require passing checks; secrets are accessed only via Vault integration/OIDC.
• No self-hosted runners for T3 unless explicitly approved and isolated.
• Build artifacts are signed; signature verification is enforced before deploy.

7) MONITORING & ALERTS
Minimum detections (see Logging Standard):
• Secret scanning “valid” → Sev-1 (auto-rotate flow).
• Vault anomalous access (principal/region/time) → Sev-2.
• Stale secret beyond rotation window → Sev-3.
• CI job attempting to echo or write secret to logs/artifacts → block + Sev-2.
• KMS key policy change → Sev-2.

8) KEY MANAGEMENT (KMS/HSM)
• Root keys in cloud KMS/HSM; separation of duties for key admins vs. users.
• Key policies: deny wide “*” principals; allow only specific service accounts.
• Key rotation: automated annually at minimum; sooner per risk; keep 2 versions active during transition.
• Signing keys for JWT/artifacts: rotate quarterly (T3 monthly) with grace overlap; publish JWKS.

9) HANDLING RULES
• DO NOT transmit secrets over chat/email; use Vault share links with single-use TTL if human handoff is unavoidable.
• DO NOT store secrets in local `.env` without encryption; accepted for dev only with TTL tokens.
• DO NOT embed secrets in images/containers; use runtime injection.
• Print/export of secret values is prohibited; use references/aliases.

10) INCIDENT RESPONSE (SECRETS)
On suspected exposure:
1) Page SecOps; open IR ticket.
2) Identify scope (repos, logs, CI, endpoints).
3) Rotate exposed materials immediately; invalidate tokens/keys.
4) Hunt for use of the exposed secret (logs, egress, vendor).
5) PIR with root cause and prevention (pre-commit hooks, repo rules, education).

11) EDUCATION & PRE-COMMIT
• Mandate pre-commit secret detectors (e.g., `gitleaks` or equivalent) in dev images.
• PR template includes a checklist: “No secrets added; reviewed diffs for secrets; CI checks pass.”

12) EXCEPTIONS
• Time-boxed (≤ 30 days) with mitigation (reduced scope, IP allowlist, extra monitoring).
• CISO approval required; recorded in `security/exception_log_template.csv`.

13) AUDIT EVIDENCE
• Vault audit logs; rotation reports; KMS key list & rotation status; GitHub secret scan dashboard; CI config; sample run logs with masked secret access; exception log.

14) METRICS (quarterly)
• % secrets within rotation window • Mean time to rotate on signal
• # secret scan findings & recurrence rate • % workloads using OIDC vs static keys

15) VERSIONING & REVIEW
• Changes via PR; CISO approval. Next review: 12 months or post-Sev-1 secrets incident.

APPENDIX A — TIER MATRIX (summary)
• Rotation: T1 90d / T2 30d / T3 14–30d (or on signal)
• Access: T2/T3 require compliant device + SSO/MFA for operators; CI via OIDC
• Storage: Vault/KMS only; prod isolated; HSM preferred for signing roots
• Exposure action: rotate immediately; scan repos/logs; notify per IRP
