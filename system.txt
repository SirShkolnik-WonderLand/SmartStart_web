Love it. Let‚Äôs design you a slick, no-uploads, interactive self-assessment app that feels like a mini-GRC‚Äîbut faster, fun, and brutally clear. Below is a complete, execution-ready blueprint: UX, flows, data model, scoring logic, and component map so you (or your team) can ship it.

‚∏ª

Vision (1-liner)

A self-test cockpit for ISO 27001 + CMMC where orgs tick through every control, assign owners, track maturity, and auto-generate real readiness scores + POA&M‚Äîwithout uploading documents.

‚∏ª

Core experience (what the user does)
	1.	Pick frameworks: ISO 27001:2022 and/or CMMC (Level 1/2/3).
	2.	Answer atomic questions per control with rich toggles (Not Implemented ‚Üí Operating Effectively).
	3.	Assign owners and due dates inline (no modal fatigue).
	4.	See instant scoring (domain heatmap, radar, gap waterfall, readiness %).
	5.	Auto-build POA&M from ‚ÄúPartial/Missing‚Äù answers (with effort/impact).
	6.	Export a clean readout (PDF/CSV/JSON) and a ‚ÄúManagement Review‚Äù deck.

‚∏ª

UI/UX system (today‚Äôs patterns that feel premium)
	‚Ä¢	Layout: 3-pane workspace
	‚Ä¢	Left: Framework Navigator (27001 domains + CMMC families, search & filters)
	‚Ä¢	Center: Assessment Canvas (question cards with inline guidance)
	‚Ä¢	Right: Inspector (owner, due date, tags, notes, references, risk)
	‚Ä¢	Bento overview: your home dashboard uses cards for Readiness, Top Gaps, Owners at Risk, Upcoming due.
	‚Ä¢	Kanban for remediation: auto-generated POA&M as lanes (Backlog ‚Üí In Progress ‚Üí Validate ‚Üí Done).
	‚Ä¢	Matrix view: controls √ó maturity for bulk edits; sticky column for control titles.
	‚Ä¢	Inline edit everywhere: owners, dates, status all editable in place; no save buttons.
	‚Ä¢	Progressive disclosure: keep the surface clean; show rationale, guidance, and mapping on demand (chevron reveals).
	‚Ä¢	Zero-doc mode: instead of uploads, allow ‚ÄúReference tokens‚Äù: (Policy: IS-001, Change Ticket: CAB-2025-19) and text evidence fields.
	‚Ä¢	Delight: micro-animations on status change (e.g., confetti for domain complete), keyboard shortcuts (J/K to move, Space to toggle).

‚∏ª

Screens (at a glance)
	1.	Onboarding: set company profile, frameworks, CMMC level, time zone.
	2.	Dashboard:
	‚Ä¢	Readiness Radar (ISO domains & CMMC families)
	‚Ä¢	Gap Waterfall (estimated effort vs. impact)
	‚Ä¢	Owner Load (burndown by person)
	3.	Assessment (master screen):
	‚Ä¢	Search (‚ÄúMFA‚Äù, ‚ÄúA.5.15‚Äù, ‚ÄúAC.L2-3.1.6‚Äù)
	‚Ä¢	Filters (domain, owner, status, NA)
	‚Ä¢	Question Card:
	‚Ä¢	Title + control citation
	‚Ä¢	Status selector (NA / Not Implemented / Partial / Implemented / Operating)
	‚Ä¢	Guidance tab (plain-English how-to)
	‚Ä¢	Mapping tab (ISO ‚Üî CMMC and related practices)
	‚Ä¢	Inspector (owner, due date, risk, tags, references)
	4.	POA&M: sortable table/kanban with calculated priority.
	5.	People: owners, roles, capacity, SLA (days-to-close by severity).
	6.	Exports: PDF ‚ÄúManagement Review,‚Äù CSV of gaps, JSON of answers.

‚∏ª

Atomic answer model (what users click)

Status scale (5 states + NA)
	‚Ä¢	NA (excluded from scoring)
	‚Ä¢	‚ùå Not Implemented (0)
	‚Ä¢	üü† Partially Implemented (0.5)
	‚Ä¢	‚úÖ Implemented (1.0)
	‚Ä¢	üü¢ Operating Effectively (1.0 + audit-ready badge)

Extras per answer
	‚Ä¢	Owner (person)
	‚Ä¢	Due date
	‚Ä¢	Risk (Impact √ó Likelihood 1‚Äì5)
	‚Ä¢	Effort (1‚Äì5)
	‚Ä¢	Notes & Reference tokens (strings, no file)
	‚Ä¢	Evidence pointer (URL or system code, optional)

‚∏ª

Scoring & readiness logic (transparent + defensible)
	‚Ä¢	Control score = status_weight √ó control_weight
	‚Ä¢	status_weight: NA=exclude, Not=0, Partial=0.5, Implemented=1, Operating=1
	‚Ä¢	control_weight: default 1; elevate ‚ÄúShowstoppers‚Äù (MFA, IR, backups) to 2
	‚Ä¢	Domain score = Œ£ control_scores / Œ£ control_weights
	‚Ä¢	Framework score (ISO or CMMC) = weighted mean of domain scores
	‚Ä¢	Readiness (overall) = weighted mean across selected frameworks
	‚Ä¢	Audit-ready badge for a control requires: Operating + owner + review date within 12 months
	‚Ä¢	POA&M priority = (RiskImpact √ó RiskLikelihood) √ó (2 ‚Äì status_weight) √ó (control_weight) √∑ Effort
	‚Ä¢	Sort descending; this yields a sensible ‚Äúfix-first‚Äù list.

‚∏ª

Data model (Prisma-style schema you can drop in)

model Framework {
  id           String   @id @default(cuid())
  key          String   @unique // "ISO27001_2022", "CMMC_L2"
  name         String
  domains      Domain[]
  controls     Control[]
  createdAt    DateTime @default(now())
}

model Domain {
  id          String   @id @default(cuid())
  frameworkId String
  code        String   // "A.5", "AC", "IR"...
  title       String
  weight      Float    @default(1)
  Framework   Framework @relation(fields: [frameworkId], references: [id])
  controls    Control[]
}

model Control {
  id          String   @id @default(cuid())
  frameworkId String
  domainId    String
  code        String   // "A.5.15", "AC.L2-3.1.6"
  title       String
  guidanceMd  String   // markdown guidance
  weight      Float    @default(1)
  mappings    Mapping[] // cross-links to other frameworks
  Framework   Framework @relation(fields: [frameworkId], references: [id])
  Domain      Domain    @relation(fields: [domainId], references: [id])
}

model Mapping {
  id           String  @id @default(cuid())
  fromControlId String
  toFrameworkKey String // "CMMC_L2"
  toCode        String  // "3.1.6"
}

model Org {
  id        String  @id @default(cuid())
  name      String
  timezone  String
  users     User[]
  projects  Project[]
}

model User {
  id        String  @id @default(cuid())
  orgId     String
  email     String  @unique
  name      String
  role      String  // "admin","auditor","owner","viewer"
  Org       Org     @relation(fields: [orgId], references: [id])
}

model Project {
  id         String  @id @default(cuid())
  orgId      String
  name       String
  frameworks String[] // ["ISO27001_2022","CMMC_L2"]
  Org        Org     @relation(fields: [orgId], references: [id])
  answers    Answer[]
}

enum Status { NA NOT_IMPLEMENTED PARTIAL IMPLEMENTED OPERATING }

model Answer {
  id          String  @id @default(cuid())
  projectId   String
  controlId   String
  status      Status
  ownerId     String?
  dueDate     DateTime?
  riskImpact  Int      @default(2)
  riskLikely  Int      @default(2)
  effort      Int      @default(2)
  notes       String?
  references  String[] // ["Policy IS-001","CAB-2025-19"]
  updatedAt   DateTime @updatedAt
  Project     Project  @relation(fields: [projectId], references: [id])
  Control     Control  @relation(fields: [controlId], references: [id])
  Owner       User?    @relation(fields: [ownerId], references: [id])
}


‚∏ª

Component map (React/Next)
	‚Ä¢	FrameworkNavigator.tsx: tree with search, filters, completion badges
	‚Ä¢	AssessmentCanvas.tsx: virtualized list of ControlCard
	‚Ä¢	ControlCard.tsx: title + status selector + tabs (Guidance / Mapping)
	‚Ä¢	InspectorPanel.tsx: owner assigner (combobox), date picker, risk slider, tags
	‚Ä¢	ScoreHeader.tsx: breadcrumb + domain score chip + keyboard tips
	‚Ä¢	POAMBoard.tsx: kanban powered by the POA&M priority formula
	‚Ä¢	Dashboard.tsx: RadarChart, Heatmap, Waterfall, OwnerLoad
	‚Ä¢	ExportsModal.tsx: PDF/CSV/JSON with toggles for redactions (no secrets)

Interactions
	‚Ä¢	Space toggles status through states
	‚Ä¢	@ opens owner finder; # adds tag
	‚Ä¢	Ctrl/Cmd+K omnibox to jump to any control by code/title

‚∏ª

Design language (clean + enterprise)
	‚Ä¢	Typography: Inter or IBM Plex; 14/16/18 scale; tight line-height
	‚Ä¢	Density control: ‚ÄúCompact‚Äù toggle for auditors
	‚Ä¢	Color: neutral surface; status colors only (red/orange/green/grey)
	‚Ä¢	Icons: status dots + tiny shields for ‚Äúaudit-ready‚Äù
	‚Ä¢	Microcopy: every control has a 1-sentence ‚ÄúWhat good looks like‚Äù

‚∏ª

Guidance content model (what shows in the card)

Each control ships with:
	‚Ä¢	Plain-English intent (why it exists)
	‚Ä¢	‚ÄúPass criteria‚Äù checklist (3‚Äì5 bullets)
	‚Ä¢	Hints (how to evidence without uploads)
	‚Ä¢	Cross-mapping (ISO‚áÑCMMC)
	‚Ä¢	Common pitfalls (e.g., ‚ÄúMFA exempted for service accounts‚Äîflag‚Äù)

Example (data seed):

{
  "code": "A.5.15",
  "title": "Access control policy",
  "intent": "Define and enforce who gets access to what and why.",
  "pass": [
    "Policy approved <12 months",
    "RBAC matrix exists & is used",
    "Quarterly access reviews recorded"
  },
  "hints": [
    "Reference: IS-AC-001; Q2 review ticket CAB-2025-19",
    "List systems in scope: ERP, Email, Cloud"
  ],
  "map": ["CMMC 3.1.1", "NIST 800-171 3.1.1"],
  "pitfalls": ["Shared admin accounts", "No SoD for finance ops"]
}


‚∏ª

Security & privacy posture (since no uploads)
	‚Ä¢	No documents stored, only structured answers + text references
	‚Ä¢	Optional link allowlist (only your company SharePoint/Confluence domains)
	‚Ä¢	Tenant isolation (row-level security or per-org DB)
	‚Ä¢	Audit log for every change (who/what/when; diff on notes)
	‚Ä¢	Read-only export with ‚Äúno secrets‚Äù mode to share with execs

‚∏ª

Multi-framework mapping
	‚Ä¢	Store one source of truth for each control; map via Mapping table.
	‚Ä¢	When in ‚ÄúBoth‚Äù mode, show a dual badge (e.g., A.5.15 ‚Üî 3.1.1) and merge guidance to avoid duplicate work.

‚∏ª

Implementation stack (battle-tested)
	‚Ä¢	Frontend: Next.js (App Router), React, TanStack Query, Radix primitives + your preferred styling (Mantine  + shadcn).
	‚Ä¢	State: URL-driven filters; optimistic updates for answers.
	‚Ä¢	Charts: lightweight (e.g., Recharts/ECharts) with print-friendly palettes.
	‚Ä¢	Backend: Node/Express (or Next API routes) + Prisma + Postgres.
	‚Ä¢	Auth: org-scoped; SSO optional.
	‚Ä¢	Exports: server-side HTML ‚Üí PDF, CSV via streaming, JSON raw.
	‚Ä¢	PWA: offline editing queue; background sync to API.

‚∏ª

What you can ship first (2-week MVP)
	1.	Seed frameworks (ISO 27001:2022 96 controls + CMMC L2 110 practices)
	2.	Navigator + Canvas + Inspector with inline status and owner assignment
	3.	Scoring + Radar + POA&M (formula above)
	4.	CSV/PDF export
	5.	Invite users (admin/owner/viewer)

‚∏ª

Stretch features that feel ‚Äúpro‚Äù
	‚Ä¢	Review cycles: auto-remind owners 90/60/30 days before policy expiry
	‚Ä¢	Control variants by scope (Corporate, Plant, Cloud)
	‚Ä¢	Evidence sampler: prompt owners to paste control identifiers (no docs)
	‚Ä¢	API: read-only endpoint for dashboards in your broader ecosystem
	‚Ä¢	Benchmark mode: compare two projects (Pre vs. Post)

‚∏ª

Deliverables I can drop in next
	‚Ä¢	Seed JSON for all controls (ISO + CMMC) with intent/pass/pitfalls/mapping
	‚Ä¢	A Prisma migration file and a minimal Next.js app scaffold
	‚Ä¢	A print-perfect PDF template for the Management Review pack

If you want, I‚Äôll generate the seed JSON + Prisma schema in-chat so you can paste straight into your repo and run prisma db push.
